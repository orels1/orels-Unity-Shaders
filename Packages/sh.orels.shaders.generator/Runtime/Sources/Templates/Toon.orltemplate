Shader %ShaderName
{
    Properties {
        %Properties
    }

    SubShader
    {
        Tags { "VRCFallback"="Standard" %ShaderTags }
        
        %ShaderModifiers


        // Global Include Start
        CGINCLUDE
        #include "UnityStandardUtils.cginc"
        #include "Lighting.cginc"
        #include "AutoLight.cginc"

        // Sampling Library
        %SamplingLibrary
        // Library Functions
        %LibraryFunctions
        ENDCG
        // Global Include End

        // PrePasses
        %PrePasses

        %TemplateFeature("PrePass")
        {
            Pass
            {
                Tags { "LightMode" = "ForwardBase" %PassTags }
                %PrePassModifiers

                // ForwardBase Depth Prepass
                CGPROGRAM
                #pragma target 4.5
                #pragma multi_compile_instancing
                #pragma multi_compile_fwdbase
                #pragma multi_compile_fog
                #pragma vertex Vertex
                #pragma fragment Fragment
                %ShaderFeatures

                #define UNITY_INSTANCED_LOD_FADE
                #define UNITY_INSTANCED_SH
                #define UNITY_INSTANCED_LIGHTMAPSTS

                #ifndef PASS_PREPASS
                    #define PASS_PREPASS
                #endif

                #ifndef UNITY_PASS_FORWARDBASE
                    #define UNITY_PASS_FORWARDBASE
                #endif

                // ShaderDefines
                %ShaderDefines
                // DataStructs
                %DataStructs
                // GlobalVariables
                %GlobalVariables

                #if defined(NEED_DEPTH)
                    UNITY_DECLARE_DEPTH_TEXTURE(_CameraDepthTexture);
                #endif

                // Variables
                %Variables

                // Textures
                %Textures

                // Functions
                %Functions

                // Free Functions
                %FreeFunctions

                // ForwardBase Depth Prepass Vertex
                #if !defined(TESS_ENABLED)
                FragmentData Vertex(VertexData v)
                {
                    UNITY_SETUP_INSTANCE_ID(v);
                    FragmentData o;
                    UNITY_INITIALIZE_OUTPUT(FragmentData, o);
                    UNITY_TRANSFER_INSTANCE_ID(v, o);
                    UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

                    // ForwardBase Depth Prepass Vertex Chain
                    %VertexFunctions

                    // ForwardBase Depth Prepass VertexBase
                    %VertexBase

                    // ForwardBase Depth Prepass PostVertex Chain
                    %PostVertexFunctions

                    return o;
                }
                #endif

                // ForwardBase Depth Prepass Fragment
                half4 Fragment(FragmentData i, bool facing: SV_IsFrontFace) : SV_TARGET
                {
                    UNITY_SETUP_INSTANCE_ID(i);
                    UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(i);
                    #ifdef FOG_COMBINED_WITH_TSPACE
                        UNITY_EXTRACT_FOG_FROM_TSPACE(i);
                    #elif defined(FOG_COMBINED_WITH_WORLD_POS)
                        UNITY_EXTRACT_FOG_FROM_WORLD_POS(i);
                    #else
                        UNITY_EXTRACT_FOG(i);
                    #endif

                    half4 FinalColor = 1;
                    #if defined(NEED_FRAGMENT_IN_PREPASS)
                    SurfaceData o = CreateSurfaceData();
                    MeshData d = CreateMeshData(i, facing);

                    // ForwardBase Depth Prepass Fragment Chain
                    %FragmentFunctions

                    // ForwardBase Depth Prepass FragmentBase
                    %FragmentBase

                    UNITY_APPLY_FOG(_unity_fogCoord, FinalColor);
                    
                    // ForwardBase Depth Prepass Color Chain
                    %ColorFunctions
                    #endif

                    // ForwardBase Depth Prepass-only Chain
                    %PrePassColorFunctions

                    return FinalColor;
                }

                ENDCG
                // ForwardBase Depth Prepass End
            }
        }

        Pass
        {
            Tags { "LightMode" = "ForwardBase" %PassTags }
            Stencil {
                Ref 69
                Comp Always
                Pass [_StencilBasePass]
            }
            %PassModifiers

            // ForwardBase Pass Start
            CGPROGRAM
            #pragma target 4.5
            #pragma multi_compile_instancing
            #pragma multi_compile_fwdbase
            #pragma multi_compile_fog
            #pragma vertex Vertex
            #pragma fragment Fragment
            %ShaderFeatures

            #define UNITY_INSTANCED_LOD_FADE
            #define UNITY_INSTANCED_SH
            #define UNITY_INSTANCED_LIGHTMAPSTS

            #ifndef UNITY_PASS_FORWARDBASE
                #define UNITY_PASS_FORWARDBASE
            #endif

            // ShaderDefines
            %ShaderDefines
            // DataStructs
            %DataStructs
            // GlobalVariables
            %GlobalVariables

            // Variables
            %Variables

            // Textures
            %Textures

            // Functions
            %Functions

            // Free Functions
            %FreeFunctions

            // ForwardBase Vertex
            #if !defined(TESS_ENABLED)
            FragmentData Vertex(VertexData v)
            {
                UNITY_SETUP_INSTANCE_ID(v);
                FragmentData o;
                UNITY_INITIALIZE_OUTPUT(FragmentData, o);
                UNITY_TRANSFER_INSTANCE_ID(v, o);
                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

                // ForwardBase Vertex Chain
                %VertexFunctions

                // ForwardBase VertexBase
                %VertexBase

                // ForwardBase PostVertex Chain
                %PostVertexFunctions

                return o;
            }
            #endif

            // ForwardBase Fragment
            half4 Fragment(FragmentData i, bool facing: SV_IsFrontFace) : SV_TARGET
            {
                UNITY_SETUP_INSTANCE_ID(i);
                UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(i);
                #ifdef FOG_COMBINED_WITH_TSPACE
                    UNITY_EXTRACT_FOG_FROM_TSPACE(i);
                #elif defined(FOG_COMBINED_WITH_WORLD_POS)
                    UNITY_EXTRACT_FOG_FROM_WORLD_POS(i);
                #else
                    UNITY_EXTRACT_FOG(i);
                #endif

                SurfaceData o = CreateSurfaceData();
                MeshData d = CreateMeshData(i, facing);
                half4 FinalColor = 1;

                // ForwardBase Fragment Chain
                %FragmentFunctions

                // ForwardBase FragmentBase
                %FragmentBase

                UNITY_APPLY_FOG(_unity_fogCoord, FinalColor);
                
                // ForwardBase Color Chain
                %ColorFunctions

                return FinalColor;
            }

            ENDCG
            // ForwardBase Pass End
        }

        Pass
        {
            Tags { "LightMode" = "ForwardAdd" %PassTags }
            ZWrite Off
            Blend SrcAlpha One, Zero One
            %AddPassModifiers

            // ForwardAdd Pass Start
            CGPROGRAM
            #pragma target 4.5
            #pragma multi_compile_instancing
            #pragma multi_compile_fwdadd_fullshadows
            #pragma multi_compile_fog
            #pragma vertex Vertex
            #pragma fragment Fragment
            %ShaderFeatures

            #define UNITY_INSTANCED_LOD_FADE
            #define UNITY_INSTANCED_SH
            #define UNITY_INSTANCED_LIGHTMAPSTS

            #ifndef UNITY_PASS_FORWARDADD
                #define UNITY_PASS_FORWARDADD
            #endif

            // ShaderDefines
            %ShaderDefines
            // DataStructs
            %DataStructs
            // GlobalVariables
            %GlobalVariables

            // Variables
            %Variables

            // Textures
            %Textures

            // Functions
            %Functions

            // Free Functions
            %FreeFunctions

            // ForwardAdd Vertex
            #if !defined(TESS_ENABLED)
            FragmentData Vertex(VertexData v)
            {
                UNITY_SETUP_INSTANCE_ID(v);
                FragmentData o;
                UNITY_INITIALIZE_OUTPUT(FragmentData, o);
                UNITY_TRANSFER_INSTANCE_ID(v, o);
                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

                // ForwardAdd Vertex Chain
                %VertexFunctions

                // ForwardAdd VertexBase
                %VertexBase

                return o;
            }
            #endif

            // ForwardAdd Fragment
            half4 Fragment(FragmentData i, bool facing: SV_IsFrontFace) : SV_TARGET
            {
                UNITY_SETUP_INSTANCE_ID(i);
                UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(i);
                #ifdef FOG_COMBINED_WITH_TSPACE
                    UNITY_EXTRACT_FOG_FROM_TSPACE(i);
                #elif defined(FOG_COMBINED_WITH_WORLD_POS)
                    UNITY_EXTRACT_FOG_FROM_WORLD_POS(i);
                #else
                    UNITY_EXTRACT_FOG(i);
                #endif

                SurfaceData o = CreateSurfaceData();
                MeshData d = CreateMeshData(i, facing);
                half4 FinalColor = 1;

                // ForwardAdd Fragment Chain
                %FragmentFunctions

                // ForwardAdd FragmentBase
                %FragmentBase

                // ForwardAdd Color Chain
                %ColorFunctions

                // ForwardAdd PostVertex Chain
                %PostVertexFunctions

                UNITY_APPLY_FOG(_unity_fogCoord, FinalColor);

                return FinalColor;
            }

            ENDCG
            // ForwardAdd Pass End
        }

        Pass
        {
            Name "META"
            Tags { "LightMode" = "Meta" %PassTags }
            Cull Off
            %MetaPassModifiers

            // Meta Pass Start
            CGPROGRAM
            #pragma target 4.5
            #pragma multi_compile_instancing
            #pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2
            #pragma shader_feature EDITOR_VISUALISATION
            #pragma vertex Vertex
            #pragma fragment Fragment
            %ShaderFeatures

            #define UNITY_INSTANCED_LOD_FADE
            #define UNITY_INSTANCED_SH
            #define UNITY_INSTANCED_LIGHTMAPSTS

            #ifndef UNITY_PASS_META
                #define UNITY_PASS_META
            #endif

            #include "UnityPBSLighting.cginc"
            #include "UnityMetaPass.cginc"

            // ShaderDefines
            %ShaderDefines
            // DataStructs
            %DataStructs
            // GlobalVariables
            %GlobalVariables

            // Variables
            %Variables

            // Textures
            %Textures

            // Functions
            %Functions

            // Free Functions
            %FreeFunctions

            // ForwardBase Vertex
            #if !defined(TESS_ENABLED)
            FragmentData Vertex(VertexData v)
            {
                UNITY_SETUP_INSTANCE_ID(v);
                FragmentData o;
                UNITY_INITIALIZE_OUTPUT(FragmentData, o);
                UNITY_TRANSFER_INSTANCE_ID(v, o);
                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

                // Meta Vertex Chain
                %VertexFunctions

                // Meta VertexBase
                %VertexBase

                // Meta PostVertex Chain
                %PostVertexFunctions

                return o;
            }
            #endif

            // Meta Fragment
            half4 Fragment(FragmentData i, bool facing: SV_IsFrontFace) : SV_TARGET
            {
                UNITY_SETUP_INSTANCE_ID(i);
                UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(i);

                SurfaceData o = CreateSurfaceData();
                MeshData d = CreateMeshData(i, facing);
                // Meta pass only takes Albedo, Alpha and Emission
                half4 FinalColor = 1;

                // Meta Fragment Chain
                %FragmentFunctions

                FinalColor = 1;

                // Meta Color Chain
                %ColorFunctions

                UnityMetaInput metaIN;
                UNITY_INITIALIZE_OUTPUT(UnityMetaInput, metaIN);

                metaIN.Albedo = FinalColor.rgb;
				metaIN.Emission = o.Emission;

                #if defined(EDITOR_VISUALISATION)
                metaIN.VizUV = i.vizUV;
                metaIN.LightCoord = i.lightCoord;
                #endif

                return UnityMetaFragment(metaIN);
            }

            ENDCG
            // Meta Pass End
        }

        Pass
        {
            Tags { "LightMode" = "ShadowCaster" %PassTags }
            %ShadowPassModifiers

            // ShadowCaster Pass Start
            CGPROGRAM
            #pragma target 4.5
            #pragma multi_compile_instancing
            #pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2
            #pragma multi_compile_shadowcaster
            #pragma vertex Vertex
            #pragma fragment Fragment
            %ShaderFeatures

            #define UNITY_INSTANCED_LOD_FADE
            #define UNITY_INSTANCED_SH
            #define UNITY_INSTANCED_LIGHTMAPSTS

            #ifndef UNITY_PASS_SHADOWCASTER
                #define UNITY_PASS_SHADOWCASTER
            #endif

            #include "UnityPBSLighting.cginc"

            // ShaderDefines
            %ShaderDefines
            // DataStructs
            %DataStructs
            // GlobalVariables
            %GlobalVariables

            // Variables
            %Variables

            // Textures
            %Textures

            // Functions
            %Functions

            // Free Functions
            %FreeFunctions

            // ShadowCaster Vertex
            #if !defined(TESS_ENABLED)
            FragmentData Vertex(VertexData v)
            {
                UNITY_SETUP_INSTANCE_ID(v);
                FragmentData o;
                UNITY_INITIALIZE_OUTPUT(FragmentData, o);
                UNITY_TRANSFER_INSTANCE_ID(v, o);
                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

                // ShadowCaster Vertex Chain
                %VertexFunctions

                // ShadowCaster VertexBase
                %VertexBase

                // ShadowCaster PostVertex Chain
                %PostVertexFunctions

                TRANSFER_SHADOW_CASTER_NORMALOFFSET(o);

                return o;
            }
            #endif

            // ShadowCaster Fragment
            half4 Fragment(FragmentData i, bool facing: SV_IsFrontFace) : SV_TARGET
            {
                UNITY_SETUP_INSTANCE_ID(i);
                UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(i);

                #if defined(NEED_FRAGMENT_IN_SHADOW)
                SurfaceData o = CreateSurfaceData();
                MeshData d = CreateMeshData(i, facing);
                half4 FinalColor = 1;

                // ShadowCaster Fragment Chain
                %FragmentFunctions

                FinalColor = 1;

                // ShadowCaster Color Chain
                %ColorFunctions
                #endif

                %ShadowFunctions

                SHADOW_CASTER_FRAGMENT(i);
            }

            ENDCG
            // ShadowCaster Pass End
        }

        Pass
        {
            Name "Outline"
            Tags { "LightMode" = "ForwardBase" %PassTags }
            Cull Front
            Stencil {
                Ref 69
                Comp [_StencilOutlineComp]
                Pass Zero
                Fail Zero
            }
            %OutlinePassModifiers

            // Outline Pass Start
            CGPROGRAM
            #pragma target 4.5
            #pragma multi_compile_instancing
            #pragma multi_compile_fwdbase
            #pragma multi_compile_fog
            #pragma vertex Vertex
            #pragma fragment Fragment
            %ShaderFeatures

            #define UNITY_INSTANCED_LOD_FADE
            #define UNITY_INSTANCED_SH
            #define UNITY_INSTANCED_LIGHTMAPSTS

            #ifndef PASS_OUTLINE
                #define PASS_OUTLINE
            #endif

            // ShaderDefines
            %ShaderDefines
            // DataStructs
            %DataStructs
            // GlobalVariables
            %GlobalVariables

            // Variables
            %Variables

            // Textures
            %Textures

            // Functions
            %Functions

            // Free Functions
            %FreeFunctions

            // Outline Vertex
            #if !defined(TESS_ENABLED)
            FragmentData Vertex(VertexData v)
            {
                UNITY_SETUP_INSTANCE_ID(v);
                FragmentData o;
                UNITY_INITIALIZE_OUTPUT(FragmentData, o);
                UNITY_TRANSFER_INSTANCE_ID(v, o);
                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
                
                #if defined(OUTLINE_ENABLED)

                // Outline Vertex Chain
                %VertexFunctions

                // Outline VertexBase
                %VertexBase

                // Outline PostVertex Chain
                %PostVertexFunctions

                return o;

                #else
                
                o.pos = asfloat(-1);
                return o;

                #endif
            }
            #endif

            // Outline Fragment
            half4 Fragment(FragmentData i, bool facing: SV_IsFrontFace) : SV_TARGET
            {
                #if defined(OUTLINE_ENABLED)

                UNITY_SETUP_INSTANCE_ID(i);
                UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(i);
                #ifdef FOG_COMBINED_WITH_TSPACE
                    UNITY_EXTRACT_FOG_FROM_TSPACE(i);
                #elif defined(FOG_COMBINED_WITH_WORLD_POS)
                    UNITY_EXTRACT_FOG_FROM_WORLD_POS(i);
                #else
                    UNITY_EXTRACT_FOG(i);
                #endif

                SurfaceData o = CreateSurfaceData();
                MeshData d = CreateMeshData(i, facing);
                half4 FinalColor = 1;

                // Outline Fragment Chain
                %FragmentFunctions

                // Outline FragmentBase
                %FragmentBase

                UNITY_APPLY_FOG(_unity_fogCoord, FinalColor);
                
                // Outline Color Chain
                %ColorFunctions

                return FinalColor;

                #else

                return half4(0.2,0.2,0.2,0);

                #endif
            }

            ENDCG
            // Outline Pass End
        }

        // ExtraPasses
        %ExtraPasses

        // PostPasses
        %PostPasses
    }
    CustomEditor "%CustomEditor"
}

