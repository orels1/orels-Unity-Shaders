%LibraryFunctions()
{
    // Parts of the source taken from
    // [Xiexe-Unity-Shaders](https://github.com/Xiexe/Xiexes-Unity-Shaders) (c) Xiexe (MIT)
    // [z3y shaders](https://github.com/z3y/shaders) (c) z3y (MIT)

    half D_GGX(half NoH, half roughness)
    {
        half a = NoH * roughness;
        half k = roughness / (1.0 - NoH * NoH + a * a);
        return k * k * (1.0 / UNITY_PI);
    }

    half D_GGX_Anisotropic(half NoH, const half3 h, const half3 t, const half3 b, half at, half ab)
    {
        half ToH = dot(t, h);
        half BoH = dot(b, h);
        half a2 = at * ab;
        half3 v = half3(ab * ToH, at * BoH, a2 * NoH);
        half v2 = dot(v, v);
        half w2 = a2 / v2;
        return a2 * w2 * w2 * (1.0 / UNITY_PI);
    }

    half V_SmithGGXCorrelated(half NoV, half NoL, half roughness)
    {
        half a2 = roughness * roughness;
        half GGXV = NoL * sqrt(NoV * NoV * (1.0 - a2) + a2);
        half GGXL = NoV * sqrt(NoL * NoL * (1.0 - a2) + a2);
        return 0.5 / (GGXV + GGXL);
    }

    half3 F_Schlick(half u, half3 f0)
    {
        return f0 + (1.0 - f0) * pow(1.0 - u, 5.0);
    }

    half3 F_Schlick(half3 f0, half f90, half VoH)
    {
        // Schlick 1994, "An Inexpensive BRDF Model for Physically-Based Rendering"
        return f0 + (f90 - f0) * pow(1.0 - VoH, 5);
    }

    half3 fresnel(half3 f0, half LoH)
    {
        half f90 = saturate(dot(f0, half(50.0 / 3).xxx));
        return F_Schlick(f0, f90, LoH);
    }

    half Fd_Burley(half perceptualRoughness, half NoV, half NoL, half LoH)
    {
        // Burley 2012, "Physically-Based Shading at Disney"
        half f90 = 0.5 + 2.0 * perceptualRoughness * LoH * LoH;
        half lightScatter = F_Schlick(1.0, f90, NoL);
        half viewScatter = F_Schlick(1.0, f90, NoV);
        return lightScatter * viewScatter;
    }

    half3 getBoxProjection(half3 direction, half3 position, half4 cubemapPosition, half3 boxMin, half3 boxMax)
    {
        #if defined(UNITY_SPECCUBE_BOX_PROJECTION) && !defined(UNITY_PBS_USE_BRDF2) || defined(FORCE_BOX_PROJECTION)
        if (cubemapPosition.w > 0)
        {
            half3 factors = ((direction > 0 ? boxMax : boxMin) - position) / direction;
            half scalar = min(min(factors.x, factors.y), factors.z);
            direction = direction * scalar + (position - cubemapPosition.xyz);
        }
        #endif

        return direction;
    }

    half3 getEnvReflection(half3 worldSpaceViewDir, half3 worldSpacePosition, half3 normal, half smoothness, int mip)
    {
        half3 env = 0;
        half3 reflDir = reflect(worldSpaceViewDir, normal);
        half perceptualRoughness = 1 - smoothness;
        half rough = perceptualRoughness * perceptualRoughness;
        reflDir = lerp(reflDir, normal, rough * rough);

        half3 reflectionUV1 = getBoxProjection(reflDir, worldSpacePosition, unity_SpecCube0_ProbePosition, unity_SpecCube0_BoxMin.xyz, unity_SpecCube0_BoxMax.xyz);
        half4 probe0 = UNITY_SAMPLE_TEXCUBE_LOD(unity_SpecCube0, reflectionUV1, mip);
        half3 probe0sample = DecodeHDR(probe0, unity_SpecCube0_HDR);

        half3 indirectSpecular;
        half interpolator = unity_SpecCube0_BoxMin.w;

        UNITY_BRANCH
        if (interpolator < 0.99999)
        {
            half3 reflectionUV2 = getBoxProjection(reflDir, worldSpacePosition, unity_SpecCube1_ProbePosition, unity_SpecCube1_BoxMin.xyz, unity_SpecCube1_BoxMax.xyz);
            half4 probe1 = UNITY_SAMPLE_TEXCUBE_SAMPLER_LOD(unity_SpecCube1, unity_SpecCube0, reflectionUV2, mip);
            half3 probe1sample = DecodeHDR(probe1, unity_SpecCube1_HDR);
            indirectSpecular = lerp(probe1sample, probe0sample, interpolator);
        }
        else
        {
            indirectSpecular = probe0sample;
        }

        env = indirectSpecular;
        return env;
    }

    half3 EnvBRDFMultiscatter(half2 dfg, half3 f0)
    {
        return lerp(dfg.xxx, dfg.yyy, f0);
    }

    half3 EnvBRDFApprox(half perceptualRoughness, half NoV, half3 f0)
    {
        half g = 1 - perceptualRoughness;
        //https://blog.selfshadow.com/publications/s2013-shading-course/lazarov/s2013_pbs_black_ops_2_notes.pdf
        half4 t = half4(1 / 0.96, 0.475, (0.0275 - 0.25 * 0.04) / 0.96, 0.25);
        t *= half4(g, g, g, g);
        t += half4(0, 0, (0.015 - 0.75 * 0.04) / 0.96, 0.75);
        half a0 = t.x * min(t.y, exp2(-9.28 * NoV)) + t.z;
        half a1 = t.w;
        return saturate(lerp(a0, a1, f0));
    }

    half GSAA_Filament(half3 worldNormal, half perceptualRoughness, half inputVariance, half threshold)
    {
        // Kaplanyan 2016, "Stable specular highlights"
        // Tokuyoshi 2017, "Error Reduction and Simplification for Shading Anti-Aliasing"
        // Tokuyoshi and Kaplanyan 2019, "Improved Geometric Specular Antialiasing"

        // This implementation is meant for deferred rendering in the original paper but
        // we use it in forward rendering as well (as discussed in Tokuyoshi and Kaplanyan
        // 2019). The main reason is that the forward version requires an expensive transform
        // of the half vector by the tangent frame for every light. This is therefore an
        // approximation but it works well enough for our needs and provides an improvement
        // over our original implementation based on Vlachos 2015, "Advanced VR Rendering".

        half3 du = ddx(worldNormal);
        half3 dv = ddy(worldNormal);

        half variance = inputVariance * (dot(du, du) + dot(dv, dv));

        half roughness = perceptualRoughness * perceptualRoughness;
        half kernelRoughness = min(2.0 * variance, threshold);
        half squareRoughness = saturate(roughness * roughness + kernelRoughness);

        return sqrt(sqrt(squareRoughness));
    }

    //https://ndotl.wordpress.com/2018/08/29/baking-artifact-free-lightmaps
    half3 tex2DFastBicubicLightmap(half2 uv, inout half4 bakedColorTex)
    {
        #if !defined(PLAT_QUEST) && defined(BICUBIC_LIGHTMAP)
        half width;
        half height;
        unity_Lightmap.GetDimensions(width, height);
        half x = uv.x * width;
        half y = uv.y * height;



        x -= 0.5f;
        y -= 0.5f;
        half px = floor(x);
        half py = floor(y);
        half fx = x - px;
        half fy = y - py;

        // note: we could store these functions in a lookup table texture, but maths is cheap
        half g0x = g0(fx);
        half g1x = g1(fx);
        half h0x = h0(fx);
        half h1x = h1(fx);
        half h0y = h0(fy);
        half h1y = h1(fy);

        half4 r = g0(fy) * (g0x * UNITY_SAMPLE_TEX2D(unity_Lightmap, (half2(px + h0x, py + h0y) * 1.0f / width)) +
        g1x * UNITY_SAMPLE_TEX2D(unity_Lightmap, (half2(px + h1x, py + h0y) * 1.0f / width))) +
        g1(fy) * (g0x * UNITY_SAMPLE_TEX2D(unity_Lightmap, (half2(px + h0x, py + h1y) * 1.0f / width)) +
        g1x * UNITY_SAMPLE_TEX2D(unity_Lightmap, (half2(px + h1x, py + h1y) * 1.0f / width)));
        bakedColorTex = r;
        return DecodeLightmap(r);
        #else
        bakedColorTex = UNITY_SAMPLE_TEX2D(unity_Lightmap, uv);
        return DecodeLightmap(bakedColorTex);
        #endif
    }

    half3 GetSpecularHighlights(half3 worldNormal, half3 lightColor, half3 lightDirection, half3 f0, half3 viewDir, half clampedRoughness, half NoV, half3 energyCompensation)
    {
        half3 halfVector = Unity_SafeNormalize(lightDirection + viewDir);

        half NoH = saturate(dot(worldNormal, halfVector));
        half NoL = saturate(dot(worldNormal, lightDirection));
        half LoH = saturate(dot(lightDirection, halfVector));

        half3 F = F_Schlick(LoH, f0);
        half D = D_GGX(NoH, clampedRoughness);
        half V = V_SmithGGXCorrelated(NoV, NoL, clampedRoughness);

        #ifndef UNITY_PBS_USE_BRDF2
        F *= energyCompensation;
        #endif

        return max(0, (D * V) * F) * lightColor * NoL * UNITY_PI;
    }

    #ifdef DYNAMICLIGHTMAP_ON
    half3 getRealtimeLightmap(half2 uv, half3 worldNormal)
    {
        half2 realtimeUV = uv;
        half4 bakedCol = tex2DFastBicubicSample(unity_DynamicLightmap, samplerunity_DynamicLightmap, realtimeUV);
        half3 realtimeLightmap = DecodeRealtimeLightmap(bakedCol);

        #ifdef DIRLIGHTMAP_COMBINED
        half4 realtimeDirTex = tex2DFastBicubicSample(unity_DynamicDirectionality, samplerunity_DynamicLightmap, realtimeUV);
        realtimeLightmap += DecodeDirectionalLightmap(realtimeLightmap, realtimeDirTex, worldNormal);
        #endif

        return realtimeLightmap;
    }
    #endif

    half computeSpecularAO(half NoV, half ao, half roughness)
    {
        return clamp(pow(NoV + ao, exp2(-16.0 * roughness - 1.0)) - 1.0 + ao, 0.0, 1.0);
    }

    half shEvaluateDiffuseL1Geomerics(half L0, half3 L1, half3 n)
    {
        // average energy
        half R0 = L0;

        // avg direction of incoming light
        half3 R1 = 0.5f * L1;

        // directional brightness
        half lenR1 = length(R1);

        // linear angle between normal and direction 0-1
        //half q = 0.5f * (1.0f + dot(R1 / lenR1, n));
        //half q = dot(R1 / lenR1, n) * 0.5 + 0.5;
        half q = dot(normalize(R1), n) * 0.5 + 0.5;
        q = isnan(q) ? 1 : q;
        q = saturate(q); // Thanks to ScruffyRuffles for the bug identity.

        // power for q
        // lerps from 1 (linear) to 3 (cubic) based on directionality
        half p = 1.0f + 2.0f * (lenR1 / R0);

        // dynamic range constant
        // should vary between 4 (highly directional) and 0 (ambient)
        half a = (1.0f - lenR1 / R0) / (1.0f + lenR1 / R0);

        return max(0, R0 * (a + (1.0f - a) * (p + 1.0f) * pow(q, p)));
    }

    // Based on bakery's suggestion - use multiply instead of min for the darkest color
    half3 SubtractMainLightWithRealtimeAttenuationFromLightmapMultiply(half3 lightmap, half attenuation, half4 bakedColorTex, half3 normalWorld)
    {
        // Let's try to make realtime shadows work on a surface, which already contains
        // baked lighting and shadowing from the main sun light.
        half3 shadowColor = unity_ShadowColor.rgb;
        half shadowStrength = _LightShadowData.x;

        // Summary:
        // 1) Calculate possible value in the shadow by subtracting estimated light contribution from the places occluded by realtime shadow:
        //      a) preserves other baked lights and light bounces
        //      b) eliminates shadows on the geometry facing away from the light
        // 2) Clamp against user defined ShadowColor.
        // 3) Pick original lightmap value, if it is the darkest one.


        // 1) Gives good estimate of illumination as if light would've been shadowed during the bake.
        //    Preserves bounce and other baked lights
        //    No shadows on the geometry facing away from the light
        half ndotl = LambertTerm (normalWorld, _WorldSpaceLightPos0.xyz);
        half3 estimatedLightContributionMaskedByInverseOfShadow = ndotl * (1- attenuation) * _LightColor0.rgb;
        half3 subtractedLightmap = lightmap - estimatedLightContributionMaskedByInverseOfShadow;

        // 2) Allows user to define overall ambient of the scene and control situation when realtime shadow becomes too dark.
        half3 realtimeShadow = max(subtractedLightmap, shadowColor);
        realtimeShadow = lerp(realtimeShadow, lightmap, shadowStrength);

        // 3) Pick darkest color
        return lightmap * realtimeShadow;
    }
}
