%Properties()
{
    UI_AdvancedSettingsHeader("# Advanced Settings", Int) = 1
    [Enum(UnityEngine.Rendering.CullMode)]_CullMode("Culling Mode", Int) = 2
    [Enum(Off, 0, On, 1)]_ZWrite("Depth Write", Int) = 1
    [Enum(UnityEngine.Rendering.CompareFunction)]_ZTest("Depth Test", Int) = 4
    [ToggleUI]_IgnoreLightprobeNormal("Uniform Lightprobe Color", Int) = 0
    [ToggleUI]_MinLight("Raise Minimum Light", Int) = 0
    UI_MinLightNote("?> This will raise the minimum light level and make you glow in dark environments. While not accurate to any world lighting, this can be nice to have to take pictures", Int) = 0
}

%Includes()
{
    "@/Libraries/PBR/LightingHelpers",
    "self"
}

%ShaderFeatures()
{
    #pragma multi_compile_fragment _ VERTEXLIGHT_ON
}

%ShaderModifiers()
{
    ZTest [_ZTest]
    ZWrite [_ZWrite]
    Cull [_CullMode]
}

%ShaderDefines()
{
    #if defined(UNITY_PBS_USE_BRDF2) || defined(SHADER_API_MOBILE)
        #define PLAT_QUEST
    #else
        #ifdef PLAT_QUEST
            #undef PLAT_QUEST
        #endif
    #endif

    #define NEED_SCREEN_POS

    #define grayscaleVec float3(0.2125, 0.7154, 0.0721)
}

%Variables()
{
    int _IgnoreLightprobeNormal;
    int _MinLight;
}

%Textures()
{
    TEXTURE2D(_Ramp);
    SAMPLER(sampler_Ramp);
    TEXTURECUBE(_BakedCubemap);
    SAMPLER(sampler_BakedCubemap);
}

%LibraryFunctions()
{
    half3 getReflectionUV(half3 direction, half3 position, half4 cubemapPosition, half3 boxMin, half3 boxMax)
    {
        #if UNITY_SPECCUBE_BOX_PROJECTION
            if (cubemapPosition.w > 0) {
                half3 factors = ((direction > 0 ? boxMax : boxMin) - position) / direction;
                half scalar = min(min(factors.x, factors.y), factors.z);
                direction = direction * scalar + (position - cubemapPosition);
            }
        #endif
        return direction;
    }

    half3 calcReflView(half3 viewDir, half3 normal)
    {
        return reflect(-viewDir, normal);
    }

    half3 calcStereoViewDir(half3 worldPos)
    {
        #if UNITY_SINGLE_PASS_STEREO
            half3 cameraPos = half3((unity_StereoWorldSpaceCameraPos[0]+ unity_StereoWorldSpaceCameraPos[1])*.5);
        #else
            half3 cameraPos = _WorldSpaceCameraPos;
        #endif
            half3 viewDir = cameraPos - worldPos;
        return normalize(viewDir);
    }

    half4 calcDiffuse(half attenuation, half3 albedo, half3 indirectDiffuse, half3 lightCol, half4 ramp)
    {
        half4 diffuse;
        half4 indirect = indirectDiffuse.xyzz;

        half grayIndirect = dot(indirectDiffuse, float3(1,1,1));
        half attenFactor = lerp(attenuation, 1, smoothstep(0, 0.2, grayIndirect));

        diffuse = ramp * attenFactor * half4(lightCol, 1) + indirect;
        diffuse = albedo.xyzz * diffuse;
        return diffuse;
    }

    half2 calcMatcapUV(half3 worldUp, half3 viewDirection, half3 normalDirection)
    {
        half3 worldViewUp = normalize(worldUp - viewDirection * dot(viewDirection, worldUp));
        half3 worldViewRight = normalize(cross(viewDirection, worldViewUp));
        half2 matcapUV = half2(dot(worldViewRight, normalDirection), dot(worldViewUp, normalDirection)) * 0.5 + 0.5;
        return matcapUV;
    }
}

%FragmentBase("XSToonLighting")
{
    half4 calcRamp(half NdL, half attenuation, half occlusion, int occlusionMode)
    {
        half remapRamp;
        remapRamp = NdL * 0.5 + 0.5;
        remapRamp *= lerp(1, occlusion, occlusionMode);
        #if defined(UNITY_PASS_FORWARDBASE)
        remapRamp *= attenuation;
        #endif
        half4 ramp = SAMPLE_TEXTURE2D(_Ramp, sampler_Ramp, half2(remapRamp, 0));
        return ramp;
    }

    half3 calcIndirectSpecular(half lightAttenuation, MeshData d, SurfaceData o, half roughness, half3 reflDir, half3 indirectLight, float3 fresnel, half4 ramp)
    {
        half3 spec = half3(0,0,0);

        #if defined(REFLECTION_MODE_OFF)
        return spec;
        #endif

        #if defined(REFLECTION_MODE_MATCAP) && defined(UNITY_PASS_FORWARDBASE)
        {
            spec = o.BakedReflection;
            if(o.ReflectionBlendMode != 1)
            {
                spec *= (indirectLight + (_LightColor0 * lightAttenuation) * 0.5);
            }
        }
        #endif
        
        #if defined(REFLECTION_MODE_PBR) && defined(UNITY_PASS_FORWARDBASE)
        {
            half3 reflectionUV1 = getReflectionUV(reflDir, d.worldSpacePosition, unity_SpecCube0_ProbePosition, unity_SpecCube0_BoxMin, unity_SpecCube0_BoxMax);
            half4 probe0 = UNITY_SAMPLE_TEXCUBE_LOD(unity_SpecCube0, reflectionUV1, roughness * UNITY_SPECCUBE_LOD_STEPS);
            half3 probe0sample = DecodeHDR(probe0, unity_SpecCube0_HDR);

            half3 indirectSpecular;
            half interpolator = unity_SpecCube0_BoxMin.w;

            UNITY_BRANCH
            if (interpolator < 0.99999)
            {
                half3 reflectionUV2 = getReflectionUV(reflDir, d.worldSpacePosition, unity_SpecCube1_ProbePosition, unity_SpecCube1_BoxMin, unity_SpecCube1_BoxMax);
                half4 probe1 = UNITY_SAMPLE_TEXCUBE_SAMPLER_LOD(unity_SpecCube1, unity_SpecCube0, reflectionUV2, roughness * UNITY_SPECCUBE_LOD_STEPS);
                half3 probe1sample = DecodeHDR(probe1, unity_SpecCube1_HDR);
                indirectSpecular = lerp(probe1sample, probe0sample, interpolator);
            }
            else
            {
                indirectSpecular = probe0sample;
            }

            if (!any(indirectSpecular))
            {
                indirectSpecular = SAMPLE_TEXTURECUBE_LOD(_BakedCubemap, sampler_BakedCubemap, reflDir, roughness * UNITY_SPECCUBE_LOD_STEPS);
                indirectSpecular *= indirectLight;
            }
            spec = indirectSpecular * fresnel;
        }
        #endif

        #if defined(REFLECTION_MODE_BAKED_CUBEMAP) && defined(UNITY_PASS_FORWARDBASE)
        {
            half3 indirectSpecular = SAMPLE_TEXTURECUBE_LOD(_BakedCubemap, sampler_BakedCubemap, reflDir, roughness * UNITY_SPECCUBE_LOD_STEPS);
            indirectSpecular *= indirectLight;
            spec = indirectSpecular * fresnel;
        }
        #endif
        return spec;
    }

    half3 calcDirectSpecular(MeshData d, SurfaceData o, float lightNoL, float NoH, float NoV, float lightLoH, half3 lightColor, half3 lightHalfVector, half anisotropy)
    {
        half specularIntensity = o.SpecularIntensity;
        half3 specular = half3(0,0,0);
        half smoothness = max(0.01, (o.SpecularArea));
        smoothness *= 1.7 - 0.7 * smoothness;

        float rough = max(smoothness * smoothness, 0.0045);
        float Dn = D_GGX(NoH, rough);
        float3 F = 1-F_Schlick(lightLoH, 0);
        float V = V_SmithGGXCorrelated(NoV, lightNoL, rough);
        float3 directSpecularNonAniso = max(0, (Dn * V) * F);

        anisotropy *= saturate(5.0 * smoothness);
        float at = max(rough * (1.0 + anisotropy), 0.001);
        float ab = max(rough * (1.0 - anisotropy), 0.001);
        float D = D_GGX_Anisotropic(NoH, lightHalfVector, d.worldSpaceTangent, d.bitangent, at, ab);
        float3 directSpecularAniso = max(0, (D * V) * F);

        specular = lerp(directSpecularNonAniso, directSpecularAniso, saturate(abs(anisotropy * 100)));
        specular = lerp(specular, smoothstep(0.5, 0.51, specular), o.SpecularSharpness) * 3 * lightColor.xyz * specularIntensity; // Multiply by 3 to bring up to brightness of standard
        specular *= lerp(1, o.Albedo, o.SpecularAlbedoTint);
        specular = clamp(specular, 0, specularIntensity);
        return specular;
    }

    half3 calcReflectionBlending(SurfaceData o, half reflectivity, half3 col, half3 indirectSpecular)
    {
        if (o.ReflectionBlendMode == 0) { // Additive
            col += indirectSpecular.xyzz * reflectivity;
            return col;
        } else if (o.ReflectionBlendMode == 1) { //Multiplicitive
            col = lerp(col, col * indirectSpecular.xyz, reflectivity);
            return col;
        } else if(o.ReflectionBlendMode == 2) { //Subtractive
            col -= indirectSpecular.xyz * reflectivity;
            return col;
        }
        return col;
    }

    half4 calcEmission(SurfaceData o, half lightAvg)
    {
        #if defined(UNITY_PASS_FORWARDBASE) // Emission only in Base Pass, and vertex lights
            float4 emission = 0;
            emission = half4(o.Emission, 1);

            half intensity = length(emission.rgb);
            half3 emissionHSV = RGB2HSV(normalize(emission.rgb));
            emissionHSV.x = fmod(emissionHSV.x + o.Hue, 1);
            emissionHSV.y = saturate(emissionHSV.y + o.Saturation);
            emissionHSV.z = saturate(emissionHSV.z + o.Value);
            emission.rgb = HSV2RGB(emissionHSV) * intensity;

            float4 scaledEmission = emission * saturate(smoothstep(1 - o.EmissionLightThreshold, 1 + o.EmissionLightThreshold, 1 - lightAvg));
            float4 em = lerp(emission, scaledEmission, o.EmissionScaleWithLight);
            return em;
        #else
            return 0;
        #endif
    }

    void XSToonLighting(MeshData d, FragmentData i, SurfaceData o, inout half4 FinalColor)
    {
        #if !defined(UNITY_PASS_SHADOWCASTER)
        half reflectance = o.Reflectivity;
        half3 f0 = 0.16 * reflectance * reflectance * (1 - o.Metallic) + o.Albedo * o.Metallic;
        half3 indirectDiffuse = 1;
        half3 indirectSpecular = 0;
        half3 directSpecular = 0;
        half occlusion = o.Occlusion;
        half perceptualRoughness = 1 - o.Smoothness;
        half3 tangentNormal = o.Normal;
        o.Normal = normalize(mul(o.Normal, d.TBNMatrix));
        half3 reflDir = calcReflView(d.worldSpaceViewDir, o.Normal);

        // Light Direction, based on method derived by Xiexe and Merlin
        #ifndef USING_DIRECTIONAL_LIGHT
            half3 lightDir = UnityWorldSpaceLightDir(d.worldSpacePosition);
        #else
            half3 lightDir = _WorldSpaceLightPos0.xyz;
        #endif

        half3 probeLightDir = unity_SHAr.xyz + unity_SHAg.xyz + unity_SHAb.xyz;
        lightDir = (lightDir + probeLightDir);

        #if !defined(POINT) && !defined(SPOT)
        if(length(unity_SHAr.xyz*unity_SHAr.w + unity_SHAg.xyz*unity_SHAg.w + unity_SHAb.xyz*unity_SHAb.w) == 0 && length(lightDir) < 0.1)
        {
            lightDir = half4(1, 1, 1, 0);
        }
        #endif
        lightDir = Unity_SafeNormalize(lightDir);

        // Attenuation
        UNITY_LIGHT_ATTENUATION(lightAttenuation, i, d.worldSpacePosition);

        // fix for rare bug where light atten is 0 when there is no directional light in the scene
        #ifdef UNITY_PASS_FORWARDBASE
            if(all(_LightColor0.rgb == 0.0))
                lightAttenuation = 1.0;
        #endif

        #if defined(USING_DIRECTIONAL_LIGHT)
            half sharp = o.ShadowSharpness * 0.5;
            lightAttenuation = smoothstep(sharp, 1 - sharp, lightAttenuation); //Converge at the center line
        #endif
        
        half3 lightColor = _LightColor0.rgb;
        
        half3 lightHalfVector = Unity_SafeNormalize(lightDir + d.worldSpaceViewDir);
        half lightNoL = dot(o.Normal, lightDir);
        half lightLoH = dot(lightDir, lightHalfVector);
        
        half NoV = abs(dot(o.Normal, d.worldSpaceViewDir)) + 1e-5;
        half NoH = saturate(dot(o.Normal, lightHalfVector));
        half3 stereoViewDir = calcStereoViewDir(d.worldSpacePosition);
        half NoSVDN = abs(dot(stereoViewDir, o.Normal));

        // Aniso Refl
        half3 reflViewAniso = 0;
        
        float3 anisotropicDirection = o.Anisotropy >= 0.0 ? d.bitangent : d.worldSpaceTangent.xyz;
        float3 anisotropicTangent = cross(anisotropicDirection, d.worldSpaceViewDir);
        float3 anisotropicNormal = cross(anisotropicTangent, anisotropicDirection);
        float bendFactor = abs(o.Anisotropy) * saturate(5.0 * perceptualRoughness);
        float3 bentNormal = normalize(lerp(o.Normal, anisotropicNormal, bendFactor));
        reflViewAniso = reflect(-d.worldSpaceViewDir, bentNormal);
        
        // Indirect diffuse
        #if !defined(LIGHTMAP_ON)
            half3 L0 = half3(unity_SHAr.w, unity_SHAg.w, unity_SHAb.w);
            indirectDiffuse.r = shEvaluateDiffuseL1Geomerics(L0.r, unity_SHAr.xyz, lerp(o.Normal, half3(0,0.5,0), _IgnoreLightprobeNormal));
            indirectDiffuse.g = shEvaluateDiffuseL1Geomerics(L0.g, unity_SHAg.xyz, lerp(o.Normal, half3(0,0.5,0), _IgnoreLightprobeNormal));
            indirectDiffuse.b = shEvaluateDiffuseL1Geomerics(L0.b, unity_SHAb.xyz, lerp(o.Normal, half3(0,0.5,0), _IgnoreLightprobeNormal));
            indirectDiffuse = max(0, indirectDiffuse);
        #elif defined(UNITY_PASS_FORWARDBASE)
            // This here is an attempt to provide a somewhat usable ramp for lightmaps
            half2 lightmapUV = d.lightmapUv.xy;
            half4 bakedColorTex = 0;
            half3 lightMap = tex2DFastBicubicLightmap(lightmapUV, bakedColorTex);

            // Support basic directionality
            #if defined(DIRLIGHTMAP_COMBINED)
                half4 lightMapDirection = tex2DFastBicubicSample(unity_LightmapInd, samplerunity_Lightmap, lightmapUV);
                
                // use lightmap direction if we can, realtim light is ignored in that case
                lightDir.xyz = lightMapDirection.xyz - 0.5;
                lightHalfVector = Unity_SafeNormalize(lightDir + d.worldSpaceViewDir);
                lightNoL = dot(o.Normal, lightDir);
                lightLoH = dot(lightDir, lightHalfVector);
                
                lightMap = DecodeDirectionalLightmap(lightMap, lightMapDirection, o.Normal);

                lightColor = lightMap * 0.6;
                indirectDiffuse = lightMap * 0.4;
            #else
                // Hacky way to support both cases of dirlight + baked and bakedy only but no directionality
                // baked generates a light dir of 0,1,0
                if (dot(lightDir.xyz, half3(0,1,0)) > 0.95) {
                    lightDir.xyz = 0;
                    lightNoL = 1;
                }
                indirectDiffuse = lightMap;
            #endif

            // we can end up using this twice, once above in the Dirlight logic and once here if both a realtime light
            // and baked lightmap are present
            half sharp2 = o.ShadowSharpness * 0.5;
            lightAttenuation = smoothstep(sharp, 1 - sharp, saturate(length(lightMap)));
        #endif
        indirectDiffuse *= lerp(occlusion, 1, o.OcclusionMode);

        bool lightEnv = any(lightDir.xyz);
        // if there is no realtime light - we rely solely on probes
        if (!lightEnv) {
            lightColor = indirectDiffuse * 0.6;
            indirectDiffuse = indirectDiffuse * 0.4;
        }

        if (_MinLight)
        {
            if (max(lightColor.r, max(lightColor.g, lightColor.b)) < 0.05)
            {
                indirectDiffuse = lerp(indirectDiffuse, 0.05, saturate(max(indirectDiffuse.r, max(indirectDiffuse.g, indirectDiffuse.b)) < 0.05));
            }
        }

        half lightAvg = (dot(indirectDiffuse.rgb, grayscaleVec) + dot(lightColor.rgb, grayscaleVec)) / 2;

        // Light Ramp
        half4 ramp = 1;
        half4 diffuse = 1;
        ramp = calcRamp(lightNoL, lightAttenuation, occlusion, o.OcclusionMode);
        diffuse = calcDiffuse(lightAttenuation, o.Albedo.rgb, indirectDiffuse, lightColor, ramp);

        #if defined(VERTEXLIGHT_ON) && defined(UNITY_PASS_FORWARDBASE)
        float4 vLightAttenuations = 0;
        float4x4 vLightColors = getVertexLightsColors(d.worldSpacePosition, o.Normal, vLightAttenuations, false);
        float4x4 vLightDirections = getVertexLightsDir(d.worldSpacePosition);
        float4x4 vLightHalfVectors = 0;
        float4 vLightNoLs = 0;
        float4 vLightLoHs = 0;
        half4 vRamp = 1;

        [unroll(4)]
        for (int i = 0; i < 4; i++)
        {
            vLightHalfVectors[i].rgb = Unity_SafeNormalize(vLightDirections[i] + d.worldSpaceViewDir);
            vLightLoHs[i] = saturate(dot(vLightDirections[i], vLightHalfVectors[i]));
            vLightNoLs[i] = saturate(dot(o.Normal, vLightDirections[i]));
            vRamp = calcRamp(vLightNoLs[i], vLightAttenuations[i], occlusion, o.OcclusionMode);
            diffuse += calcDiffuse(vLightAttenuations[i], o.Albedo.rgb, 0, vLightColors[i], vRamp);
        }
        #endif

        // Rims
        half3 rimLight = 0;
        #if defined(RIMLIGHT_ON)
        rimLight = o.RimLight.rgb;
        rimLight *= lightColor.xyz + indirectDiffuse.xyz;
        rimLight *= lerp(1, lightAttenuation + indirectDiffuse.xyz, o.RimAttenuation);
        #endif

        half3 rimShadow = 1;
        #if defined(RIMSHADOW_ON)
        rimShadow = o.RimShadow;
        #endif

        float3 fresnel = F_Schlick(NoV, f0);

        #if !defined(REFLECTION_MODE_OFF)
        indirectSpecular = calcIndirectSpecular(lightAttenuation, d, o, perceptualRoughness, reflViewAniso, indirectDiffuse, fresnel, ramp) * occlusion;
        #endif
        
        #if defined(SPECULAR_ON)
        directSpecular = calcDirectSpecular(d, o, lightNoL, NoH, NoV, lightLoH, lightColor, lightHalfVector, o.SpecularAnisotropy) * lightNoL * occlusion * lightAttenuation;
        #if defined(VERTEXLIGHT_ON) && defined(UNITY_PASS_FORWARDBASE)
        {
            [unroll(4)]
            for (int i = 0; i < 4; i++)
            {
                directSpecular += calcDirectSpecular(d, o, vLightNoLs[i], vLightLoHs[i], NoV, vLightLoHs[i], vLightColors[i], vLightHalfVectors[i], o.SpecularAnisotropy) * vLightNoLs[i] * occlusion * vLightAttenuations[i];
            }
        }
        #endif
        #endif

        FinalColor.rgb = diffuse.rgb * rimShadow.rgb;
        
        #if !defined(REFLECTION_MODE_OFF)
        FinalColor.rgb = calcReflectionBlending(o, reflectance, FinalColor.rgb, indirectSpecular);
        #endif

        FinalColor.rgb += max(directSpecular.xyz, rimLight.rgb).rgb;
        FinalColor.rgb += calcEmission(o, lightAvg);
        
        // Outline
        #if defined(PASS_OUTLINE)
            half3 outlineColor = 0;
            half3 ol = o.OutlineColor;
            outlineColor = ol * saturate(lightAttenuation * lightNoL) * lightColor.rgb;
            outlineColor += indirectDiffuse * ol;
            outlineColor = lerp(outlineColor, ol, o.OutlineLightingMode);
            FinalColor.rgb = outlineColor;
        #endif

        FinalColor.a = o.Alpha;

        #endif
    }
}