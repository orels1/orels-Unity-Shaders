%Properties()
{
    UI_AdvancedSettingsHeader("# Advanced Settings", Int) = 1
    [Enum(UnityEngine.Rendering.CullMode)]_CullMode("Culling Mode", Int) = 2
    [Enum(Off, 0, On, 1)]_ZWrite("Depth Write", Int) = 1
    [Enum(UnityEngine.Rendering.CompareFunction)]_ZTest("Depth Test", Int) = 4
    [Toggle(SHADE_VERTEXLIGHTS)]_ShadeVertexLights("Enable Vertex Lights", Int) = 0
    UI_ShadeVertexLightsNote("> This will enable vertex-light compatible shader variants. If you're not planning to use vertex (non-important) lights - you can keep this off to make the final shader smaller", Int) = 0
    UI_AdvancedSettingsStancilHeader("## Stencils", Int) = 1
    [IntRange]_StencilRef("Reference", Range(0, 255)) = 0
    [Enum(UnityEngine.Rendering.CompareFunction)]_StencilComp("Comparison", Float) = 8
    [Enum(UnityEngine.Rendering.StencilOp)]_StencilPassOp("Pass Operation", Float) = 0
    [Enum(UnityEngine.Rendering.StencilOp)]_StencilFailOp("Fail Operation", Float) = 0
    [Enum(UnityEngine.Rendering.StencilOp)]_StencilZFailOp("ZFail Operation", Float) = 0
    
    UI_GSAAHeader("## GSAA", Float) = 0
    [Toggle(GSAA)]_EnableGSAA("GSAA Enabled", Int) = 1
    UI_GSAANote("> GSAA dramatically reduces specular aliasing", Int) = 0
    _GSAAVariance("GSAA Variance %ShowIf(GSAA)", Range(0, 1)) = 0.05
    _GSAAThreshold("GSAA Threshold %ShowIf(GSAA)", Range(0, 1)) = 0.1

    UI_MobileTweaks("## Mobile Tweaks", Int) = 1
    [Toggle(FORCE_BOX_PROJECTION)]_ForceBoxProjection("Force Box Projection", Int) = 0
    [KeywordEnum(ACES, Unreal, Uncharted)]MOBILE_TONEMAP("Mobile Tonemap Mode", Int) = 0
    [Toggle(APPLY_COLOR_CORRECTION)]_ApplyColorCorrection("Apply Mobile Color Correction", Int) = 0
    UI_ApplyColorCorrectionNote("> Enables in-shader color correction, useful for Mobile platforms where PostProcessing is not available", Int) = 0
    _ColorCorrLift("Lift %ShowIf(_ApplyColorCorrection)", Range(0, 2)) = 1
    _ColorCorrGamma("Gamma %ShowIf(_ApplyColorCorrection)", Range(0,2)) = 1.1
    _ColorCorrGain("Gain %ShowIf(_ApplyColorCorrection)", Range(0, 2)) = 1.4
    
    UI_LightmappingHeader("# Lightmapping", Int) = 1
    UI_LightmappingDocs("[This module has documentation](https://shaders.orels.sh/docs/orl-standard/base-shader#lightmapping)", Int) = 0
    [Toggle(NONLINEAR_SH)]_NonlinearSH("Non-Linear Lightprobe SH", Int) = 0
    _SpecOcclusion("Specular Occlusion", Range(0, 1)) = 0.75
    _SpecularRoughnessMod("Specular Roughness Mod", Range(0, 1)) = 1
    [Toggle(BICUBIC_LIGHTMAP)]_Bicubic("Bicubic Sampling", Int) = 0
    [Toggle(BAKED_SPECULAR)]_BakedSpecular("Baked Specular", Int) = 0
    UI_GITweaksHeader("## Global Illumination Tweaks", Int) = 0
    _GIEmissiveBoost("GI Emissive Boost", Float) = 1
    [ToggleUI]_IgnoreRealtimeGI("Ignore Relatime GI", Int) = 0
    UI_IgnoreRealtimeGINote("> This will make the material ignore Unity Realtime GI system. It does not affect custom RTGI systems like LTCGI", Int) = 0
    UI_BakeryHeader("## Bakery Features", Int) = 0
    [Toggle(BAKERY_ENABLED)]_BakeryEnabled("Enable Bakery Features", Int) = 0
    [KeywordEnum(None, MONOSH, SH, RNM)]BAKERY("Bakery Mode %ShowIf(BAKERY_ENABLED)", Int) = 0
    [Toggle(BAKERY_SHNONLINEAR)]_BakerySHNonLinear("Bakery Non-Linear SH %ShowIf(BAKERY_ENABLED)", Int) = 1
    UI_InternalHeader("# Internal", Int) = 0
    [NonModifiableTextureData]_DFG("DFG > %RequiredTexture(@/dfg-multiscatter.exr)", 2D) = "white" {}
    _RNM0("RNM0 >", 2D) = "white" {}
    _RNM1("RNM1 >", 2D) = "white" {}
    _RNM2("RNM2 >", 2D) = "white" {}
}

%ShaderFeatures()
{
    #pragma shader_feature_local BICUBIC_LIGHTMAP
    #pragma shader_feature_local BAKED_SPECULAR
    #pragma shader_feature_local GSAA
    #pragma shader_feature_local FORCE_BOX_PROJECTION
    #pragma shader_feature_local NONLINEAR_SH
    #pragma shader_feature_local APPLY_COLOR_CORRECTION
    #pragma shader_feature_local SHADE_VERTEXLIGHTS
    #if defined(SHADE_VERTEXLIGHTS)
        #pragma multi_compile _ VERTEXLIGHT_ON
    #endif
}

%ShaderDefines()
{
    #if defined(UNITY_PBS_USE_BRDF2) || defined(SHADER_API_MOBILE)
        #define PLAT_QUEST
    #else
        #ifdef PLAT_QUEST
            #undef PLAT_QUEST
        #endif
    #endif

    #define NEED_SCREEN_POS
}

%Variables()
{
    half _GSAAVariance;
    half _GSAAThreshold;
    half _ColorCorrLift;
    half _ColorCorrGamma;
    half _ColorCorrGain;

    half _SpecOcclusion;
    half _SpecularRoughnessMod;
    half _GIEmissiveBoost;
    int _IgnoreRealtimeGI;
}

%Textures()
{
    TEXTURE2D(_DFG);
    SAMPLER(sampler_DFG);
}

%Includes()
{
    "@/Libraries/PBR/LightingHelpers",
    "@/Modules/Bakery",
    "self"
}

%FragmentBase("FragmentBase")
{
    void FragmentBase(MeshData d, FragmentData i, SurfaceData o, inout half4 FinalColor)
    {
        #if defined(UNITY_PASS_SHADOWCASTER)
            return;
        #else
        half reflectance = 0.5;
        half3 f0 = 0.16 * reflectance * reflectance * (1 - o.Metallic) + o.Albedo * o.Metallic;
        half3 pixelLight = 0;
        half3 indirectDiffuse = 1;
        half3 indirectSpecular = 0;
        half3 directSpecular = 0;
        half occlusion = o.Occlusion;
        half perceptualRoughness = 1 - o.Smoothness;
        half3 tangentNormal = o.Normal;
        o.Normal = Unity_SafeNormalize(mul(o.Normal, d.TBNMatrix));

        #ifndef USING_DIRECTIONAL_LIGHT
        fixed3 lightDir = normalize(UnityWorldSpaceLightDir(d.worldSpacePosition));
        #else
        fixed3 lightDir = _WorldSpaceLightPos0.xyz;
        #endif

        #if defined(GSAA)
        perceptualRoughness = GSAA_Filament(o.Normal, perceptualRoughness, _GSAAVariance, _GSAAThreshold);
        #endif

        UNITY_LIGHT_ATTENUATION(lightAttenuation, i, d.worldSpacePosition);
        half3 lightColor = lightAttenuation * _LightColor0.rgb;

        half3 lightHalfVector = Unity_SafeNormalize(lightDir + d.worldSpaceViewDir);
        half lightNoL = saturate(dot(o.Normal, lightDir));
        half lightLoH = saturate(dot(lightDir, lightHalfVector));

        half NoV = abs(dot(o.Normal, d.worldSpaceViewDir)) + 1e-5;
        pixelLight = lightNoL * lightColor * Fd_Burley(perceptualRoughness, NoV, lightNoL, lightLoH);

        // Collect Vertex Light Data and calculate direct diffuse
        #if defined(SHADE_VERTEXLIGHTS) &&defined(VERTEXLIGHT_ON) && defined(UNITY_PASS_FORWARDBASE)
        float4x4 vLightColors = getVertexLightsColors(d.worldSpacePosition, o.Normal, false);
        float4x4 vLightDirections = getVertexLightsDir(d.worldSpacePosition);
        float4x4 vLightHalfVectors = 0;
        float4 vLightNoLs = 0;
        float4 vLightLoHs = 0;

        [unroll(4)]
        for (int i = 0; i < 4; i++)
        {
            vLightHalfVectors[i].rgb = Unity_SafeNormalize(vLightDirections[i] + d.worldSpaceViewDir);
            vLightLoHs[i] = saturate(dot(vLightDirections[i], vLightHalfVectors[i]));
            vLightNoLs[i] = saturate(dot(o.Normal, vLightDirections[i]));
            vLightColors[i] = vLightNoLs[i] * vLightColors[i] * Fd_Burley(perceptualRoughness, NoV, vLightNoLs[i], vLightLoHs[i]);
        }
        #endif

        // READ THE LIGHTMAP
        // Can be Baked, Realtime, both or either
        #if (defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)) && !defined(UNITY_PASS_FORWARDADD)
            half3 lightMap = 0;
            half4 bakedColorTex = 0;
            half2 lightmapUV = d.lightmapUv.xy;

            // explicitly checking for lightmap on because we can be in rtgi only mode
            #if defined(LIGHTMAP_ON)
            
            // UNITY LIGHTMAPPING
            #if !defined(BAKERYLM_ENABLED) || !defined(BAKERY_ENABLED)
                lightMap = tex2DFastBicubicLightmap(lightmapUV, bakedColorTex);
            #endif

            // BAKERY RNM MODE (why do we even support it??)
            #if defined(BAKERY_RNM) && defined(BAKERY_ENABLED)
                half3 rnm0 = DecodeLightmap(BakeryTex2D(_RNM0, sampler_RNM0, lightmapUV, _RNM0_TexelSize));
                half3 rnm1 = DecodeLightmap(BakeryTex2D(_RNM1, sampler_RNM0, lightmapUV, _RNM0_TexelSize));
                half3 rnm2 = DecodeLightmap(BakeryTex2D(_RNM2, sampler_RNM0, lightmapUV, _RNM0_TexelSize));
                
                lightMap = saturate(dot(rnmBasis0, tangentNormal)) * rnm0 +
                saturate(dot(rnmBasis1, tangentNormal)) * rnm1 +
                saturate(dot(rnmBasis2, tangentNormal)) * rnm2;
            #endif

            // BAKERY SH MODE (these are also used for the specular)
            #if defined(BAKERY_SH) && defined(BAKERY_ENABLED)
                half3 L0 = DecodeLightmap(BakeryTex2D(unity_Lightmap, samplerunity_Lightmap, lightmapUV, _RNM0_TexelSize));
                
                half3 nL1x = BakeryTex2D(_RNM0, sampler_RNM0, lightmapUV, _RNM0_TexelSize) * 2.0 - 1.0;
                half3 nL1y = BakeryTex2D(_RNM1, sampler_RNM0, lightmapUV, _RNM0_TexelSize) * 2.0 - 1.0;
                half3 nL1z = BakeryTex2D(_RNM2, sampler_RNM0, lightmapUV, _RNM0_TexelSize) * 2.0 - 1.0;
                half3 L1x = nL1x * L0 * 2.0;
                half3 L1y = nL1y * L0 * 2.0;
                half3 L1z = nL1z * L0 * 2.0;
                
                // Non-Linear mode
                #if defined(BAKERY_SHNONLINEAR)
                half lumaL0 = dot(L0, half(1));
                half lumaL1x = dot(L1x, half(1));
                half lumaL1y = dot(L1y, half(1));
                half lumaL1z = dot(L1z, half(1));
                half lumaSH = shEvaluateDiffuseL1Geomerics(lumaL0, half3(lumaL1x, lumaL1y, lumaL1z), o.Normal);
                
                lightMap = L0 + o.Normal.x * L1x + o.Normal.y * L1y + o.Normal.z * L1z;
                half regularLumaSH = dot(lightMap, 1.0);
                lightMap *= lerp(1.0, lumaSH / regularLumaSH, saturate(regularLumaSH * 16.0));
                #else
                lightMap = L0 + o.Normal.x * L1x + o.Normal.y * L1y + o.Normal.z * L1z;
                #endif
            #endif

            #if defined(DIRLIGHTMAP_COMBINED)
                half4 lightMapDirection = tex2DFastBicubicSample(unity_LightmapInd, samplerunity_Lightmap, lightmapUV);
                #if !defined(BAKERY_MONOSH)
                    lightMap = DecodeDirectionalLightmap(lightMap, lightMapDirection, o.Normal);
                #endif
            #endif

            // Unity+Bakery often results in a full clear of DIRLIGHTMAP_COMBINED keyword
            // which in turn results in no lightmap being applied when MONOSH is enabled
            // this is an escape hatch for such a case to improve dev experience
            #if defined(BAKERY_MONOSH) && defined(BAKERY_ENABLED) && !defined(DIRLIGHTMAP_COMBINED)
                lightMap = tex2DFastBicubicLightmap(lightmapUV, bakedColorTex);
            #endif

            // Bakery MonoSH handling
            #if defined(BAKERY_MONOSH) && defined(BAKERY_ENABLED) && defined(DIRLIGHTMAP_COMBINED)
                half3 L0 = tex2DFastBicubicLightmap(lightmapUV, bakedColorTex);
                half3 nL1 = lightMapDirection.xyz * 2.0 - 1.0;
                half3 L1x = nL1.x * L0 * 2.0;
                half3 L1y = nL1.y * L0 * 2.0;
                half3 L1z = nL1.z * L0 * 2.0;

                #if defined(BAKERY_SHNONLINEAR)
                half lumaL0 = dot(L0, 1);
                half lumaL1x = dot(L1x, 1);
                half lumaL1y = dot(L1y, 1);
                half lumaL1z = dot(L1z, 1);
                half lumaSH = shEvaluateDiffuseL1Geomerics(lumaL0, half3(lumaL1x, lumaL1y, lumaL1z), o.Normal);

                lightMap = L0 + o.Normal.x * L1x + o.Normal.y * L1y + o.Normal.z * L1z;
                half regularLumaSH = dot(lightMap, 1);
                lightMap *= lerp(1, lumaSH / regularLumaSH, saturate(regularLumaSH*16));
                #else
                lightMap = L0 + o.Normal.x * L1x + o.Normal.y * L1y + o.Normal.z * L1z;
                #endif

                lightMap = max(lightMap, 0.0);
            #endif

            #endif // defined(LIGHTMAP_ON)

            // Handle RTGI specifically
            #if defined(DYNAMICLIGHTMAP_ON) && !defined(PLAT_QUEST)
                // only branch on non-meta passes
                #if !defined(UNITY_PASS_META)
                {
                    [branch]
                    if (!_IgnoreRealtimeGI) {
                        half3 realtimeLightMap = getRealtimeLightmap(d.lightmapUv.zw, o.Normal);
                        lightMap += realtimeLightMap;
                    }
                    // o.Emission = realtimeLightMap;
                }
                #else
                {
                    half3 realtimeLightMap = getRealtimeLightmap(d.lightmapUv.zw, o.Normal);
                    lightMap += realtimeLightMap;
                }
                #endif
            #endif

            #if defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN)
                pixelLight = 0;
                lightMap = SubtractMainLightWithRealtimeAttenuationFromLightmapMultiply(lightMap, lightAttenuation, bakedColorTex, o.Normal);
            #endif
            indirectDiffuse = lightMap;

        // Lightprobes Sampling
        #else
            // LPPV support
            #if UNITY_LIGHT_PROBE_PROXY_VOLUME
            UNITY_BRANCH
            if (unity_ProbeVolumeParams.x == 1)
            {
                indirectDiffuse = SHEvalLinearL0L1_SampleProbeVolume(half4(o.Normal, 1), d.worldSpacePosition);
            }
            else // Mesh has BlendProbes instead of LPPV
            {
                #if defined(NONLINEAR_SH)
                half3 L0 = float3(unity_SHAr.w, unity_SHAg.w, unity_SHAb.w);
                indirectDiffuse.r = shEvaluateDiffuseL1Geomerics(L0.r, unity_SHAr.xyz, o.Normal);
                indirectDiffuse.g = shEvaluateDiffuseL1Geomerics(L0.g, unity_SHAg.xyz, o.Normal);
                indirectDiffuse.b = shEvaluateDiffuseL1Geomerics(L0.b, unity_SHAb.xyz, o.Normal);
                indirectDiffuse = max(0, indirectDiffuse);
                #else
                indirectDiffuse = max(0, ShadeSH9(half4(o.Normal, 1)));   
                #endif
            }
            #else // No LPPVs enabled project-wide

            #if defined(NONLINEAR_SH)
            half3 L0 = half3(unity_SHAr.w, unity_SHAg.w, unity_SHAb.w);
            indirectDiffuse.r = shEvaluateDiffuseL1Geomerics(L0.r, unity_SHAr.xyz, o.Normal);
            indirectDiffuse.g = shEvaluateDiffuseL1Geomerics(L0.g, unity_SHAg.xyz, o.Normal);
            indirectDiffuse.b = shEvaluateDiffuseL1Geomerics(L0.b, unity_SHAb.xyz, o.Normal);
            indirectDiffuse = max(0, indirectDiffuse);
            #else
            indirectDiffuse = max(0, ShadeSH9(half4(o.Normal, 1)));   
            #endif

            #endif
        #endif // end of #if defined(LIGHTMAP_ON) && !defined(UNITY_PASS_FORWARDADD)

        #if defined(LIGHTMAP_SHADOW_MIXING) && defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) && defined(LIGHTMAP_ON) && !defined(UNITY_PASS_FORWARDADD)
        {
            float3 forwardShadows = UnityComputeForwardShadows(d.lightmapUv.xy, d.worldSpacePosition, d.screenPos);
            pixelLight *= forwardShadows;
        }
        #endif


        half3 dfguv = half3(NoV, perceptualRoughness, 0);
        half2 dfg = SAMPLE_TEXTURE2D(_DFG, sampler_DFG, dfguv).xy;
        half3 energyCompensation = 1.0 + f0 * (1.0 / dfg.y - 1.0);

        half rough = perceptualRoughness * perceptualRoughness;
        half clampedRoughness = max(rough, 0.002);

        // DIRECT REALTIME SPECULAR
        #if !defined(SPECULAR_HIGHLIGHTS_OFF) && defined(USING_LIGHT_MULTI_COMPILE)
        {
            // Main Light
            {
                half NoH = saturate(dot(o.Normal, lightHalfVector));
                half3 F = F_Schlick(lightLoH, f0);
                half D = D_GGX(NoH, clampedRoughness);
                half V = V_SmithGGXCorrelated(NoV, lightNoL, clampedRoughness);

                F *= energyCompensation;

                directSpecular = max(0, D * V * F) * pixelLight * UNITY_PI;
            }

            // Vertex Lights
            #if defined(SHADE_VERTEXLIGHTS) && defined(VERTEXLIGHT_ON) && defined(UNITY_PASS_FORWARDBASE)
            {
                [unroll(4)]
                for (int i = 0; i < 4; i++)
                {
                    half NoH = saturate(dot(o.Normal, vLightHalfVectors[i]));
                    half3 F = F_Schlick(vLightLoHs[i], f0);
                    half D = D_GGX(NoH, clampedRoughness);
                    half V = V_SmithGGXCorrelated(NoV, vLightNoLs[i], clampedRoughness);

                    F *= energyCompensation;

                    directSpecular += max(0, D * V * F) * vLightColors[i] * UNITY_PI;
                }
            }
            #endif
        }
        #endif

        // Composite Vertex Lights with Main Light for final diffuse mixing
        #if defined(SHADE_VERTEXLIGHTS) && defined(VERTEXLIGHT_ON) && defined(UNITY_PASS_FORWARDBASE)
        {
            pixelLight += vLightColors[0] + vLightColors[1] + vLightColors[2] + vLightColors[3];
        }
        #endif

        // BAKED SPECULAR
        #if defined(BAKED_SPECULAR) && !defined(BAKERYLM_ENABLED) && !defined(UNITY_PASS_FORWARDADD)
        {
            half3 bakedDominantDirection = 1;
            half3 bakedSpecularColor = 0;

            // only do it if we have a directional lightmap
            #if defined(DIRLIGHTMAP_COMBINED) && defined(LIGHTMAP_ON)
            bakedDominantDirection = (lightMapDirection.xyz) * 2 - 1;
            half directionality = max(0.001, length(bakedDominantDirection));
            bakedDominantDirection /= directionality;
            bakedSpecularColor = indirectDiffuse;
            #endif

            // if we do not have lightmap - derive the specular from probes
            #if !defined(LIGHTMAP_ON)
            bakedSpecularColor = half3(unity_SHAr.w, unity_SHAg.w, unity_SHAb.w);
            bakedDominantDirection = unity_SHAr.xyz + unity_SHAg.xyz + unity_SHAb.xyz;
            #endif

            bakedDominantDirection = normalize(bakedDominantDirection);
            directSpecular += GetSpecularHighlights(o.Normal, bakedSpecularColor, bakedDominantDirection, f0, d.worldSpaceViewDir, lerp(1, clampedRoughness, _SpecularRoughnessMod), NoV, energyCompensation);
        }
        #endif

        half3 fresnel = F_Schlick(NoV, f0);

        // BAKERY DIRECT SPECULAR
        #if defined(LIGHTMAP_ON) && defined(BAKERY_LMSPEC) && defined(BAKERY_ENABLED) && !defined(UNITY_PASS_FORWARDADD)
            #if defined(BAKERY_RNM)
            {
                half3 viewDirTangent = -normalize(d.tangentSpaceViewDir);
                half3 dominantDirTangent = rnmBasis0 * dot(rnm0, lumaConv) +
                rnmBasis1 * dot(rnm1, lumaConv) +
                rnmBasis2 * dot(rnm2, lumaConv);

                half3 dominantDirTangentNormalized = normalize(dominantDirTangent);
                half3 specColor = saturate(dot(rnmBasis0, dominantDirTangentNormalized)) * rnm0 +
                saturate(dot(rnmBasis1, dominantDirTangentNormalized)) * rnm1 +
                saturate(dot(rnmBasis2, dominantDirTangentNormalized)) * rnm2;
                half3 halfDir = Unity_SafeNormalize(dominantDirTangentNormalized - viewDirTangent);
                half NoH = saturate(dot(tangentNormal, halfDir));
                half spec = D_GGX(NoH, lerp(1, clampedRoughness, _SpecularRoughnessMod));
                directSpecular += spec * specColor * fresnel;
            }
            #endif

            #if defined(BAKERY_SH)
            {
                half3 dominantDir = half3(dot(nL1x, lumaConv), dot(nL1y, lumaConv), dot(L1z, lumaConv));
                half3 sh = L0 + dominantDir.x * L1x + dominantDir.y * L1y + dominantDir.z * L1z;
                dominantDir = normalize(dominantDir);
                directSpecular += GetSpecularHighlights(o.Normal, sh, dominantDir, f0, d.worldSpaceViewDir, lerp(1, clampedRoughness, _SpecularRoughnessMod), NoV, energyCompensation);
            }
            #endif

            #if defined(BAKERY_MONOSH) && defined(DIRLIGHTMAP_COMBINED)
            {
                half3 dominantDir = nL1;
                half3 sh = L0 + dominantDir.x * L1x + dominantDir.y * L1y + dominantDir.z * L1z;
                dominantDir = normalize(dominantDir);
                directSpecular += GetSpecularHighlights(o.Normal, sh, dominantDir, f0, d.worldSpaceViewDir, lerp(1, clampedRoughness, _SpecularRoughnessMod), NoV, energyCompensation);
            }
            #endif
        #endif // End of #if defined(BAKERY_LMSPEC) && defined(BAKERY_ENABLED) && !defined(UNITY_PASS_FORWARDADD)

        // REFLECTIONS
        #if !defined(UNITY_PASS_FORWARDADD)
        half3 reflDir = reflect(-d.worldSpaceViewDir, o.Normal);
        reflDir = lerp(reflDir, o.Normal, clampedRoughness);

        Unity_GlossyEnvironmentData envData;
        envData.roughness = perceptualRoughness;
        envData.reflUVW = getBoxProjection(reflDir, d.worldSpacePosition.xyz, unity_SpecCube0_ProbePosition, unity_SpecCube0_BoxMin.xyz, unity_SpecCube0_BoxMax.xyz);

        half3 probe0 = Unity_GlossyEnvironment(UNITY_PASS_TEXCUBE(unity_SpecCube0), unity_SpecCube0_HDR, envData);
        indirectSpecular = probe0;

        #if defined(UNITY_SPECCUBE_BLENDING) || defined(FORCE_BOX_PROJECTION)
        UNITY_BRANCH
        if (unity_SpecCube0_BoxMin.w < 0.99999)
        {
            envData.reflUVW = getBoxProjection(reflDir, d.worldSpacePosition.xyz, unity_SpecCube1_ProbePosition, unity_SpecCube1_BoxMin.xyz, unity_SpecCube1_BoxMax.xyz);
            half3 probe1 = Unity_GlossyEnvironment(UNITY_PASS_TEXCUBE_SAMPLER(unity_SpecCube1, unity_SpecCube0), unity_SpecCube1_HDR, envData);
            indirectSpecular = lerp(probe1, probe0, unity_SpecCube0_BoxMin.w);
        }
        #endif

        half horizon = min(1 + dot(reflDir, o.Normal), 1);
        indirectSpecular *= horizon * horizon;

        half specularOcclusion = saturate(length(indirectDiffuse) * (1.0 / _SpecOcclusion));
        dfg.x *= specularOcclusion;
        specularOcclusion = computeSpecularAO(NoV, o.Occlusion, clampedRoughness);

        indirectSpecular *= specularOcclusion * EnvBRDFMultiscatter(dfg, f0);
        #endif

        #if defined(_INTEGRATE_CUSTOMGI) && !defined(UNITY_PASS_FORWARDADD)
        IntegrateCustomGI(d, o, indirectSpecular, indirectDiffuse);
        #endif

        // FINAL COLOR
        FinalColor = half4(o.Albedo.rgb * (1 - o.Metallic) * (indirectDiffuse * occlusion + (pixelLight)) + indirectSpecular + directSpecular, o.Alpha);
        
        FinalColor.rgb += o.Emission;
        #endif
    }
}

%Color("FragmentBaseMetaColor", 1000)
{
    void FragmentBaseMetaColor(inout SurfaceData o)
    {
        // Boost emissive for Meta (mostly for RTGI)
        #if defined(UNITY_PASS_META)
        o.Emission *= pow(_GIEmissiveBoost, 2.2);
        #endif
    }
}

%Color("FragmentBaseColorCorr", 1001)
{
    void FragmentBaseColorCorr(inout half4 FinalColor) {
        #if defined(APPLY_COLOR_CORRECTION) && defined(PLAT_QUEST)
        
        #if defined(MOBILE_TONEMAP_ACES)
        FinalColor.rgb = Tonemap_ACES(FinalColor.rgb);
        #elif defined(MOBILE_TONEMAP_UNREAL)
        FinalColor.rgb = pow(Tonemap_Unreal(FinalColor.rgb), 2.2);
        #elif defined(MOBILE_TONEMAP_UNCHARTED)
        FinalColor.rgb = pow(Tonemap_Uncharted2(FinalColor.rgb),2.2);
        #endif

        FinalColor.rgb = applyLiftGammaGainEffect(FinalColor.rgb, _ColorCorrLift, _ColorCorrGamma, _ColorCorrGain);
        #endif
    }
}