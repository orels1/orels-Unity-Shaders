%Properties()
{
    UI_VertexAnimHeader("# Vertex Animation", Float) = 1
    UI_VertexAnimDocs("[This module has documentation](https://shaders.orels.sh/docs/orl-standard/vertex-animation)", Int) = 0
    // SPINNING
    UI_SpinHeader("## Spin", Int) = 0
    [KeywordEnum(None, Local, World)]SPIN("Spinning", Int) = 0
    _SpinAxis("Spin Axis %ShowIf(!SPIN_NONE)", Vector) = (0, 1, 0, 0)
    [ToggleUI]_NormalizeSpinAxis("Normalize Axis %ShowIf(!SPIN_NONE)", Int) = 1
    _SpinOrigin("Spin Origin Point %ShowIf(!SPIN_NONE)", Vector) = (0, 0, 0, 0)
    UI_SpinOriginNote("> Spin Origin Point is considered in object's local space %ShowIf(!SPIN_NONE)", Int) = 0
    _SpinSpeed("Spin Speed %ShowIf(!SPIN_NONE)", Float) = 1
    UI_SpinOffsetsHeader("## Offsets %ShowIf(!SPIN_NONE)", Int) = 0
    _SpinPhaseOffset("Phase Offset %ShowIf(!SPIN_NONE)", Float) = 0
    [ToggleUI]_SpinPositionOffset("Position-Based Offset %ShowIf(!SPIN_NONE)", Int) = 0
    [Enum(XYZ, 0, X, 1, Y, 2, Z, 3)]_SpinPositionOffsetAxis("Offset Axis %ShowIf(!SPIN_NONE && _SpinPositionOffset)", Int) = 0
    _SpinPositionOffsetScale("Offset Scale %ShowIf(!SPIN_NONE && _SpinPositionOffset)", Float) = 1
    _SpinPositionOffsetSpeed("Offset Speed Modifier %ShowIf(!SPIN_NONE && _SpinPositionOffset)", Float) = 0.1
    [ToggleUI]_SpinStoppedChance("Spin Stopped Chance %ShowIf(!SPIN_NONE && _SpinPositionOffset)", Int) = 0
    _SpinStoppedChanceSeed("Spin Stopped Chance Seed %ShowIf(!SPIN_NONE && _SpinStoppedChance && _SpinPositionOffset)", Int) = 0

    // FLOATING
    UI_FloatHeader("## Float", Int) = 0
    [KeywordEnum(None, Local, World)]FLOATING("Floating", Int) = 0
    _FloatAxis("Float Axis %ShowIf(!FLOATING_NONE)", Vector) = (0, 1, 0, 0)
    [ToggleUI]_NormalizeFloatAxis("Normalize Axis %ShowIf(!SPIN_NONE)", Int) = 1
    _FloatSpeed("Float Speed %ShowIf(!FLOATING_NONE)", Float) = 1
    _FloatPhaseOffset("Phase Offset %ShowIf(!FLOATING_NONE)", Float) = 0
    [ToggleUI]_FloatPositionOffset("Position Offset %ShowIf(!FLOATING_NONE)", Int) = 0
    [Enum(XYZ, 0, X, 1, Y, 2, Z, 3)]_FloatPositionOffsetAxis("Position Offset Axis %ShowIf(!FLOATING_NONE && _FloatPositionOffset)", Int) = 0
    _FloatPositionOffsetScale("Position Offset Scale %ShowIf(!FLOATING_NONE && _FloatPositionOffset)", Float) = 1
    _FloatAmount("Float Amount %ShowIf(!FLOATING_NONE)", Float) = 0.2
    [ToggleUI]_FloatTwoWay("Two Way %ShowIf(!FLOATING_NONE)", Int) = 1
    UI_FloatNote("> Defines whether the object will go back and forth along the axis %ShowIf(!FLOATING_NONE)", Int) = 0

    // SCALING
    UI_ScaleHeader("## Scale", Int) = 0
    [KeywordEnum(None, Uniform, Flow)]SCALE("Scaling", Int) = 0
    [Enum(UV, 0, Local Position, 1)]_ScaleFlowType("Flow Based On %ShowIf(SCALE_FLOW)", Int) = 0
    [Enum(UV1, 0, UV2, 1, UV3, 2, UV4, 3)]_ScaleFlowUVChannel("Flow UV Channel %ShowIf(SCALE_FLOW && _ScaleFlowType == 0)", Int) = 0
    [Enum(X, 0, Y, 1, Z, 2)]_ScaleFlowAxis("Flow Axis %ShowIf(SCALE_FLOW)", Int) = 0
    _ScaleSpeed("Scale Speed %ShowIf(!SCALE_NONE)", Float) = 1
    _ScaleFlowCyclePause("Cycle Pause %ShowIf(SCALE_FLOW)", Float) = 1
    UI_ScaleFlowCyclePauseNote("> Controls how many seconds to wait before restarting the flow cycle %ShowIf(SCALE_FLOW)", Float) = 1
    _ScalePhaseOffset("Phase Offset %ShowIf(!SCALE_NONE)", Float) = 0
    [ToggleUI]_ScalePositionOffset("Position Offset %ShowIf(SCALE_UNIFORM)", Int) = 0
    [Enum(XYZ, 0, X, 1, Y, 2, Z, 3)]_ScalePositionOffsetAxis("Position Offset Axis %ShowIf(SCALE_UNIFORM && _ScalePositionOffset)", Int) = 0
    _ScalePositionOffsetScale("Position Offset Scale %ShowIf(SCALE_UNIFORM && _ScalePositionOffset)", Float) = 1
    _ScaleAmount("Scale Amount %ShowIf(!SCALE_NONE)", Float) = 0.5
    _ScaleFlowSmoothing("Flow Smoothing %ShowIf(SCALE_FLOW)", Float) = 2
    _ScaleFlowWidth("Flow Width %ShowIf(SCALE_FLOW)", Float) = 0.05
}

%ShaderFeatures()
{
    #pragma shader_feature_local SPIN_NONE SPIN_LOCAL SPIN_WORLD
    #pragma shader_feature_local FLOATING_NONE FLOATING_LOCAL FLOATING_WORLD
    #pragma shader_feature_local SCALE_NONE SCALE_UNIFORM SCALE_FLOW
}

%ShaderTags()
{
    "DisableBatching" = "True"
}

%ShaderDefines()
{
    #define EXTRA_V2F_0
}

%Variables()
{
    int _Spin;
    int _SpinOrientation;
    half4 _SpinAxis;
    int _NormalizeSpinAxis;
    half _SpinSpeed;
    half _SpinPhaseOffset;
    int _SpinPositionOffset;
    int _SpinPositionOffsetAxis;
    half _SpinPositionOffsetScale;
    half4 _SpinOrigin;
    half _SpinPositionOffsetSpeed;
    int _SpinStoppedChance;
    float _SpinStoppedChanceSeed;

    half4 _FloatAxis;
    int _NormalizeFloatAxis;
    half _FloatSpeed;
    half _FloatPhaseOffset;
    int _FloatPositionOffset;
    int _FloatPositionOffsetAxis;
    half _FloatPositionOffsetScale;
    half _FloatAmount;
    half _FloatTwoWay;

    int _ScaleFlowType;
    int _ScaleFlowUVChannel;
    int _ScaleFlowAxis;
    half _ScaleSpeed;
    half _ScalePhaseOffset;
    half _ScaleFlowCyclePause;
    int _ScalePositionOffset;
    int _ScalePositionOffsetAxis;
    half _ScalePositionOffsetScale;
    half _ScaleAmount;
    half _ScaleFlowSmoothing;
    half _ScaleFlowWidth;
}

%Vertex("VertexAnimationVertex")
{
    float chash13(float3 p3)
    {
        p3  = frac(p3 * .1031);
        p3 += dot(p3, p3.zyx + 31.32);
        return frac((p3.x + p3.y) * p3.z);
    }

    void VertexAnimationVertex(inout VertexData v, inout FragmentData o)
    {
        // half3 wsVert = TransformObjectToWorld(v.vertex.xyz);
        // half3 wsNormal = TransformObjectToWorld(v.normal.xyz);
        half3 wsObjectPosition = mul(unity_ObjectToWorld, half4(0,0,0,1));
        half factor = 0;
        o.extraV2F0 = v.vertex;
        
        #if defined(SPIN_LOCAL) || defined(SPIN_WORLD)
        {
            half3 origin = _SpinOrigin.xyz;
            if (_NormalizeSpinAxis) {
                _SpinAxis.xyz = normalize(_SpinAxis.xyz);
            }
            
            half offset = _SpinPhaseOffset;
            half speedOffset = 0;
            if (_SpinPositionOffset) {
                if (_SpinPositionOffsetAxis == 0) {
                    offset += length(wsObjectPosition.xyz);
                } else {
                    offset += wsObjectPosition[_SpinPositionOffsetAxis - 1];
                }
                offset *= _SpinPositionOffsetScale;
                speedOffset = pow(abs(_SpinPositionOffsetSpeed), offset) * sign(_SpinPositionOffsetSpeed);
            }

            half factor = _Time.y * (_SpinSpeed + speedOffset) + offset;
            factor %= 6.2831;

             if (_SpinStoppedChance) {
                float3 seed = _SpinStoppedChanceSeed + offset;
                float chance = step(0.5, chash13(seed));
                factor *= chance;
            }

            #if defined(SPIN_LOCAL)
            v.vertex.xyz = RotateAroundAxis(origin, v.vertex.xyz, _SpinAxis.xyz, factor);
            v.normal.xyz = RotateAroundAxis(origin, v.normal.xyz, _SpinAxis.xyz, factor);
            #elif defined(SPIN_WORLD)
            float3 scale = float3(
                length(unity_ObjectToWorld._m00_m10_m20),
                length(unity_ObjectToWorld._m01_m11_m21),
                length(unity_ObjectToWorld._m02_m12_m22)
            );
            half3 lsAxis = normalize(TransformWorldToObject(_SpinAxis.xyz));
            half3 vertRot = RotateAroundAxis(origin, v.vertex.xyz, lsAxis, factor);
            half3 normalRot = RotateAroundAxis(origin, v.normal.xyz, lsAxis, factor);
            v.vertex.xyz = vertRot;
            v.normal.xyz = normalRot;
            #endif
        }
        #endif
        
        #if defined(FLOATING_LOCAL) || defined(FLOATING_WORLD)
        {
            half offset = _FloatPhaseOffset;
            if (_FloatPositionOffset) {
                if (_FloatPositionOffsetAxis == 0) {
                    offset += length(wsObjectPosition.xyz) * _FloatPositionOffsetScale;
                } else {
                    offset += wsObjectPosition[_FloatPositionOffsetAxis - 1] * _FloatPositionOffsetScale;
                }
            }
            half factor = sin(_Time.y * _FloatSpeed + offset);
            factor = lerp((factor + 1) / 2, factor, _FloatTwoWay);
            
            #if defined(FLOATING_LOCAL)
            half3 axis = _FloatAxis.xyz;
            if (_NormalizeFloatAxis) {
                axis = normalize(axis);
            }
            #elif defined(FLOATING_WORLD)
            half3 axis = normalize(TransformWorldToObject(_FloatAxis.xyz)).xyz;
            #endif

            v.vertex.xyz += factor * axis * _FloatAmount;
        }
        #endif
        
        #if defined(SCALE_UNIFORM)
        {
            half offset = _ScalePhaseOffset;
            if (_ScalePositionOffset) {
                if (_ScalePositionOffsetAxis == 0) {
                    offset += length(wsObjectPosition.xyz) * _ScalePositionOffsetScale;
                } else {
                    offset += wsObjectPosition[_ScalePositionOffsetAxis - 1] * _ScalePositionOffsetScale;
                }
            }
            half factor = sin(_Time.y * _ScaleSpeed + offset);
            v.vertex.xyz += factor * v.vertex.xyz * _ScaleAmount;
        }
        #endif

        #if defined(SCALE_FLOW)
        {
            half offset = _ScalePhaseOffset;
            half factor = ((_Time.y * _ScaleSpeed + offset) % (1.1 + _ScaleFlowWidth * 2 + _ScaleFlowCyclePause)) - 0.1;
            half2 uvChannel = v.uv0;
            switch (_ScaleFlowUVChannel)
            {
                case 1: uvChannel = v.uv1; break;
                case 2: uvChannel = v.uv2; break;
                case 3: uvChannel = v.uv3; break;
            }
            half scaleSource = (_ScaleFlowType ? v.vertex.xyz : uvChannel.xyx)[_ScaleFlowAxis];
            half mask = smoothstep(factor + _ScaleFlowWidth, factor - _ScaleFlowWidth, scaleSource) * smoothstep(factor - _ScaleFlowWidth, factor + _ScaleFlowWidth, scaleSource);
            mask = saturate(pow(mask * 2, _ScaleFlowSmoothing));
            v.vertex.xyz += v.normal.xyz * _ScaleAmount * mask;
        }
        #endif
    }
}
