%ShaderTags()
{
    "LTCGI" = "_IntegrateLTCGI"
}

%Properties()
{
    [ToggleUI]UI_LTCGIHeader ("# LTCGI", Int) = 1
    UI_LTCGIDocs("[This module has documentation](https://shaders.orels.sh/docs/orl-standard/ltcgi)", Int) = 0
    [Toggle(INTEGRATE_LTCGI)]_IntegrateLTCGI("Integrate LTCGI", Int) = 0
    UI_LTCGIDownload("[Make sure to download LTCGI before enabling this option](https://github.com/PiMaker/ltcgi/releases)", Int) = 0
    [ToggleUI]_LTCGIEnableOnMobile("Enable on Mobile", Int) = 0
    UI_LTCGIEnableOnMobileNote("?> LTCGI is pretty heavy for mobile devices, please test your content when enabling this option", Int) = 0
    [ToggleUI]_LTCGIClampBrightness("Clamp Brightness", Int) = 0
    _LTCGIMaxBrightness("Max Brightness %ShowIf(_LTCGIClampBrightness)", Range(0,1)) = 1
}

%ShaderFeatures()
{
    #pragma shader_feature_local_fragment INTEGRATE_LTCGI
}

%ShaderDefines()
{
    #if defined(INTEGRATE_LTCGI)
        #define _INTEGRATE_CUSTOMGI
    #endif
}

%CheckedInclude("Packages/at.pimaker.ltcgi/Shaders/LTCGI.cginc")

%Variables()
{
    int _LTCGIEnableOnMobile;
    int _LTCGIClampBrightness;
    half _LTCGIMaxBrightness;
}

%Fragment("LTCGIFragment") {
    // this function MUST be named IntegrateCustomGI as its called from the Lighting code
    void IntegrateCustomGI(MeshData d, SurfaceData o, inout half3 indirectSpecular, inout half3 indirectDiffuse)
    {
        #if defined(PLAT_QUEST)
        if (!_LTCGIEnableOnMobile) return;
        #endif

        #if defined(INTEGRATE_LTCGI)
            half3 diffuse = 0;
            half3 specular = 0;
            LTCGI_Contribution(
                d.worldSpacePosition.xyz,
                o.Normal.xyz,
                d.worldSpaceViewDir,
                1 - o.Smoothness,
                d.uv1.xy,
                diffuse,
                specular
            );

            if (_LTCGIClampBrightness) {
                half3 hsv = RGB2HSV(specular);
                hsv.z = tanh(hsv.z) * max(0, _LTCGIMaxBrightness);
                indirectSpecular = HSV2RGB(hsv);
            } else {
                indirectSpecular += specular;
                indirectDiffuse += diffuse;
            }
        #endif
    }

    void LTCGIFragment() {
    }
}