%Properties()
{
    UI_RimLightHeader("# Rim Light", Int) = 0
    [Toggle(RIMLIGHT_ON)]_RimLight("Enable Rim Light", Int) = 0
    _RimTint("Tint %ShowIf(RIMLIGHT_ON)", Color) = (1,1,1,1)
    _RimIntensity("Intensity %ShowIf(RIMLIGHT_ON)", Float) = 0
    _RimAlbedoTint("Albedo Tint %ShowIf(RIMLIGHT_ON)", Range(0,1)) = 0
    _RimEnvironmentTint("Environment Tint %ShowIf(RIMLIGHT_ON)", Range(0,1)) = 0
    [Tooltip(Controls how much the rimlight will be visible in shadowed areas. 0 always visible)]_RimAttenuation("Attenuation %ShowIf(RIMLIGHT_ON)", Range(0,1)) = 1
    _RimRange("Range %ShowIf(RIMLIGHT_ON)", Range(0, 1)) = 0.7
    [Tooltip(Controls how much the rim light will be offset by the light direction. 1 Will only show up in the areas hit by the light, 0 will show up everywhere)]_RimThreshold("Threshold %ShowIf(RIMLIGHT_ON)", Range(0, 1)) = 0.1
    _RimSharpness("Sharpness %ShowIf(RIMLIGHT_ON)", Range(0,1)) = 0.1
}

%ShaderFeatures()
{
    #pragma shader_feature_local_fragment RIMLIGHT_ON
}

%Variables()
{
    half4 _RimTint;
    half _RimIntensity;
    half _RimAlbedoTint;
    half _RimEnvironmentTint;
    half _RimAttenuation;
    half _RimRange;
    half _RimThreshold;
    half _RimSharpness;

    half3 GLOBAL_pixelNormal;
}

%Fragment("ToonRimLightFragment")
{
    void ToonRimLightFragment(MeshData d, inout SurfaceData o) {
        #if defined(RIMLIGHT_ON)
        
        #ifndef USING_DIRECTIONAL_LIGHT
            fixed3 lightDir = normalize(UnityWorldSpaceLightDir(d.worldSpacePosition));
        #else
            fixed3 lightDir = _WorldSpaceLightPos0.xyz;
        #endif
        bool lightEnv = any(lightDir.xyz);
        if (!lightEnv) {
            lightDir = unity_SHAr.xyz + unity_SHAg.xyz + unity_SHAb.xyz;
        }

        half3 normal = 0;
        #if defined(PIXEL_NORMAL_SET)
        normal = GLOBAL_pixelNormal;
        #else
        normal = o.Normal;
        #endif

        half lightNoL = saturate(dot(normal, lightDir));
        half SVDNoN = abs(dot(d.svdn, normal));

        half rimIntensity = saturate((1 - SVDNoN)) * saturate(pow(lightNoL, _RimThreshold));
        rimIntensity = smoothstep(_RimRange - _RimSharpness, _RimRange + _RimSharpness, rimIntensity);
        half4 rim = rimIntensity * _RimIntensity;

        // Rim Light Env Tint
        half3 env = 0;
        #if defined(UNITY_PASS_FORWARDBASE)
            env = getEnvReflection(d.worldSpaceViewDir.xyz, d.worldSpacePosition.xyz, normal, o.Smoothness, 5);
        #endif
        
        o.RimLight = rim * _RimTint * lerp(1, half4(o.Albedo.rgb,1), _RimAlbedoTint) * lerp(1, half4(env.rgb,1), _RimEnvironmentTint);
        o.RimLight *= _RimTint.a;
        o.RimAttenuation = _RimAttenuation;
        
        #endif
    }
}