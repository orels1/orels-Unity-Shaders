%Properties()
{
    UI_MainHeader("# Main Settings", Int) = 1
    UI_ToonDocs("[This shader has documentation](https://shaders.orels.sh/docs/toon)", Int) = 0
    _Color("Main Color", Color) = (1, 1, 1, 1)
    _BackfaceColor("Backface Color %ShowIf(_CullMode != 2)", Color) = (1, 1, 1, 1)
    _BackfaceAlbedoTint("Backface Albedo Tint", Range(0,1)) = 1
    [ToggleUI]_TintByVertexColor("Tint By Vertex Color", Int) = 0
    _MainTex("Albedo", 2D) = "white" {}
    [Toggle(SEPARATE_ALPHA)]_SeparateAlpha("Separate Transparency Texture", Int) = 0
    _AlphaTex("Transparency %ShowIf(_SeparateAlpha)", 2D) = "white" {}
    _AlphaScale("Alpha Scale %ShowIf(_MainTex || SEPARATE_ALPHA)", Range(0,2)) = 1
    [Enum(UV1, 0, UV2, 1, UV3, 2, UV4, 3)]_MainTexUVSet("UV Set", Int) = 0
    _Hue("Hue", Range(0,1)) = 0
    _Saturation("Saturation", Range(-1,1)) = 0
    _Value("Value", Range(-1,1)) = 0
    _Ramp("Ramp %Gradient()", 2D) = "grayscaleRamp" {}
    _ShadowSharpness("Shadow Sharpness", Range(0,1)) = 0.5
}

%ShaderDefines()
{
    #define GLOBAL_UV_SET
}

%ShaderFeatures()
{
    #pragma shader_feature_local_fragment SEPARATE_ALPHA
}


%Variables()
{
    float4 _MainTex_ST;
    int _MainTexUVSet;
    int _TintByVertexColor;
    half4 _Color;
    half4 _BackfaceColor;
    half _BackfaceAlbedoTint;
    half _AlphaScale;
    half _Hue;
    half _Saturation;
    half _Value;
    half _ShadowSharpness;

    half2 GLOBAL_uv;
}

%Textures()
{
    TEXTURE2D(_MainTex);
    SAMPLER(sampler_MainTex);

    #if defined(SEPARATE_ALPHA)
    TEXTURE2D(_AlphaTex);
    #endif
}

%Fragment("ToonMainFragment")
{
    void ToonMainFragment(MeshData d, inout SurfaceData o, bool facing)
    {
        half2 uv = 0;
        switch (_MainTexUVSet) {
            case 0: uv = d.uv0; break;
            case 1: uv = d.uv1; break;
            case 2: uv = d.uv2; break;
            case 3: uv = d.uv3; break;
        }
        uv = uv * _MainTex_ST.xy + _MainTex_ST.zw;
        GLOBAL_uv = uv;
        half4 albedo = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, GLOBAL_uv);
        if (facing) {
            albedo *= _Color;
        } else {
            albedo = lerp(_BackfaceColor, albedo * _BackfaceColor, _BackfaceAlbedoTint);
        }
        half3 albedoHSV = RGB2HSV(albedo.rgb);

        albedoHSV.x = fmod(albedoHSV.x + _Hue, 1);
        albedoHSV.y = saturate(albedoHSV.y + _Saturation);
        albedoHSV.z = saturate(albedoHSV.z + _Value);
        albedo.rgb = HSV2RGB(albedoHSV);

        o.Hue = _Hue;
        o.Saturation = _Saturation;
        o.Value = _Value;
        
        if (_TintByVertexColor) {
            albedo.rgb *= d.vertexColor.rgb;
        }
        o.Albedo = albedo.rgb;
        #if defined(NEED_ALBEDO_ALPHA)
        {
            #if defined(SEPARATE_ALPHA) 
            o.Alpha = saturate(SAMPLE_TEXTURE2D(_AlphaTex, sampler_MainTex, GLOBAL_uv).r * _AlphaScale);
            #else
            o.Alpha = saturate(albedo.a * _AlphaScale);
            #endif
        }
        #else
        o.Alpha = 1;
        #endif
        o.ShadowSharpness = _ShadowSharpness;
    }
}