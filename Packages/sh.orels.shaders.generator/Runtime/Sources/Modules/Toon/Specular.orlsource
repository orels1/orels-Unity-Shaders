%Properties()
{
    UI_SpecularHeader("# Specular", Int) = 0
    [Toggle(SPECULAR_ON)]_SpecularOn("Enable Specular", Int) = 0
    _SpecularMap("Specular Map > %ShowIf(SPECULAR_ON)", 2D) = "white" {}
    UI_SpecMapdNote("> Red - Intensity, Green - Albedo Tint, Blue - Roughness %ShowIf(SPECULAR_ON)", Int) = 0
    [Enum(Synced With Albedo, 0, Independent, 1)]_SpecularTilingMode("Tiling Mode %ShowIf(_SpecularMap)", Int) = 0
    _SpecularTiling("Tiling %ShowIf(_SpecularMap)", Float) = 1
    UI_SpecularTilingSyncedNote("> Will scale UVs based on the Albedo texture Tiling and Offset settings %ShowIf(_SpecularTilingMode == 0 && _SpecularMap)", Int) = 0
    UI_SpecularTilingIndependentNote("> Will scale UVs on its own %ShowIf(_SpecularTilingMode == 1 && _SpecularMap)", Int) = 0

    _SpecularIntensity("Intensity %ShowIf(SPECULAR_ON)", Float) = 0
    _SpecularRoughness("Roughness %ShowIf(SPECULAR_ON)", Range(0, 1)) = 0
    _SpecularSharpness("Sharpness %ShowIf(SPECULAR_ON)", Range(0, 1)) = 0
    _SpecularAnisotropy("Anisotropy %ShowIf(SPECULAR_ON)", Range(-1.0, 1.0)) = 0
    _SpecularAlbedoTint("Albedo Tint %ShowIf(SPECULAR_ON)", Range(0, 1)) = 1

    UI_SpecularMasking("## Masking %ShowIf(SPECULAR_ON)", Int) = 0
    _SpecularMask("Specular Mask > %ShowIf(SPECULAR_ON)", 2D) = "white" {}
    [Enum(Synced With Albedo, 0, Independent, 1)]_SpecularMaskTilingMode("Tiling Mode %ShowIf(_SpecularMask)", Int) = 0
    _SpecularMaskTiling("Tiling %ShowIf(_SpecularMask)", Float) = 1
    UI_SpecularMaskTilingSyncedNote("> Will scale UVs based on the Albedo texture Tiling and Offset settings %ShowIf(_SpecularMaskTilingMode == 0 && _SpecularMask)", Int) = 0
    UI_SpecularMaskTilingIndependentNote("> Will scale UVs on its own %ShowIf(_SpecularMaskTilingMode == 1 && _SpecularMask)", Int) = 0
    _SpecularMaskStrength("Mask Strength %ShowIf(SPECULAR_ON)", Range(0, 1)) = 1
}

%ShaderFeatures()
{
    #pragma shader_feature_local_fragment SPECULAR_ON
}

%Variables()
{
    int _SpecularMapUVSet;
    int _SpecularTilingMode;
    half _SpecularTiling;

    half _SpecularIntensity;
    half _SpecularRoughness;
    half _SpecularSharpness;
    half _SpecularAnisotropy;
    half _SpecularAlbedoTint;

    int _SpecularMaskTilingMode;
    half _SpecularMaskTiling;
    half _SpecularMaskStrength;

    half2 GLOBAL_uv;
}

%Textures()
{
    TEXTURE2D(_SpecularMap);
    TEXTURE2D(_SpecularMask);
}

%Fragment("ToonSpecularFragment")
{
    void ToonSpecularFragment(MeshData d, inout SurfaceData o) {
        #if defined(SPECULAR_ON)
        
        half2 globalUv = 0;
        
        #if defined(GLOBAL_UV_SET)
        globalUv = GLOBAL_uv;
        #else
        globalUv = d.uv0;
        #endif

        half2 specularUv = lerp(globalUv * _SpecularTiling, d.uv0 * _SpecularTiling, _SpecularTilingMode);
        half2 specularMaskUv = lerp(globalUv * _SpecularMaskTiling, d.uv0 * _SpecularMaskTiling, _SpecularMaskTilingMode);

        half3 specMap = SAMPLE_TEXTURE2D(_SpecularMap, sampler_MainTex, specularUv);
        o.SpecularIntensity = max(0, _SpecularIntensity * specMap.r);
        o.SpecularArea = max(0.01, GSAA_Filament(o.Normal, _SpecularRoughness, 0.05, 0.1) * specMap.b);
        o.SpecularAnisotropy = _SpecularAnisotropy;
        o.SpecularAlbedoTint = _SpecularAlbedoTint * specMap.g;
        o.SpecularSharpness = _SpecularSharpness;
        o.SpecularArea = lerp(o.SpecularArea, o.SpecularArea * SAMPLE_TEXTURE2D(_SpecularMask, sampler_MainTex, specularMaskUv).r, _SpecularMaskStrength);
        #endif
    }
}