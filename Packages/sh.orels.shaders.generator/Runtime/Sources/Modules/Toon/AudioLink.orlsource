%Properties()
{
    UI_AudioLink("# AudioLink", Int) = 0
    [KeywordEnum(None, Single Channel, Packed Map, UV Based)]AL_MODE("Audio Link Mode", Int) = 0
    [NoScaleOffset]_ALMap("Audio Link Map > %ShowIf(!AL_MODE_NONE)", 2D) = "white" {}
    [Enum(UV1, 0, UV2, 1, UV3, 2, UV4, 3)]_ALMapUVSet("UV Set %ShowIf(!AL_MODE_NONE)", Int) = 0
    [HDR]_ALEmissionColor("Color %ShowIf(!AL_MODE_NONE && !AL_MODE_PACKED_MAP)", Color) = (0,0,0,0)
    [ToggleUI]_ALEmissionDotMask("Audio Link Rim Mask", Int) = 0
    UI_ALEmissionDotMaskNote("> When enabled, the AudioLink-powered emission will be darkened by the rim settings", Int) = 1
    [ToggleUI]_ALEmissionDotMaskInvert("Invert Rim Mask %ShowIf(_ALEmissionDotMask)", Int) = 0
    _ALEmissionDotMaskSmoothing("Rim Mask Smoothing %ShowIf(_ALEmissionDotMask)", Float) = 2
    [Enum(Bass,0,Low Mids,1,High Mids,3,Treble,4)]_ALBand("Frequency Band %ShowIf(AL_MODE_SINGLE_CHANNEL)", Int) = 0
    [IntRange]_ALSmoothingLevel("Smoothing Level %ShowIf(AL_MODE_PACKED_MAP || AL_MODE_SINGLE_CHANNEL)", Range(0, 16)) = 1
    UI_ALPackedRedHeader("## Red Channel %ShowIf(AL_MODE_PACKED_MAP)", Int) = 0
    [ToggleUI]_ALGradientOnRed("Gradient %ShowIf(AL_MODE_PACKED_MAP) %CombineWith(_ALPackedRedColor)", Int) = 0
    [HideInInspector][HDR]_ALPackedRedColor("Color", Color) = (0,0,0,0)
    UI_ALPackedGreenHeader("## Green Channel %ShowIf(AL_MODE_PACKED_MAP)", Int) = 0
    [ToggleUI]_ALGradientOnGreen("Gradient %ShowIf(AL_MODE_PACKED_MAP) %CombineWith(_ALPackedGreenColor)", Int) = 0
    [HideInInspector][HDR]_ALPackedGreenColor("Color", Color) = (0,0,0,0)
    UI_ALPackedBlueHeader("## Blue Channel %ShowIf(AL_MODE_PACKED_MAP)", Int) = 0
    [ToggleUI]_ALGradientOnBlue("Gradient %ShowIf(AL_MODE_PACKED_MAP) %CombineWith(_ALPackedBlueColor)", Int) = 0
    [HideInInspector][HDR]_ALPackedBlueColor("Color", Color) = (0,0,0,0)
    [IntRange]_ALUVWidth("History Sample Amount %ShowIf(AL_MODE_UV_BASED)", Range(0,128)) = 128
}

%ShaderFeatures()
{
    #pragma shader_feature_local_fragment AL_MODE_NONE AL_MODE_SINGLE_CHANNEL AL_MODE_PACKED_MAP AL_MODE_UV_BASED
    #if !defined(AL_MODE_SINGLE_CHANNEL) && !defined(AL_MODE_PACKED_MAP) && !defined(AL_MODE_UV_BASED)
        #define AL_MODE_NONE
    #endif
}

%Includes()
{
    "@/Modules/AudioLink",
    "self"
}

%Variables()
{
    int _ALBand;
    half4 _ALEmissionColor;

    int _ALEmissionDotMask;
    int _ALEmissionDotMaskInvert;
    half _ALEmissionDotMaskSmoothing;

    int _ALGradientOnRed;
    int _ALGradientOnGreen;
    int _ALGradientOnBlue;
    half4 _ALPackedRedColor;
    half4 _ALPackedGreenColor;
    half4 _ALPackedBlueColor;
    int _ALSmoothingLevel;
    int _ALUVWidth;
    int _ALMapUVSet;
}

%Textures()
{
    TEXTURE2D(_ALMap);
    SAMPLER(sampler_ALMap);
}

%Fragment("ToonALFragment")
{
    void ToonALFragment(MeshData d, inout SurfaceData o) {
        #if defined(AL_MODE_NONE)
            return;
        #else

        if(AudioLinkIsAvailable()) {
            half2 alUV = 0;

            half2 globalUv = 0;

            #if defined(GLOBAL_UV_SET)
            globalUv = GLOBAL_uv;
            #else
            globalUv = d.uv0;
            #endif

            switch (_ALMapUVSet) {
                case 0: alUV = globalUv; break;
                case 1: alUV = d.uv1; break;
                case 2: alUV = d.uv2; break;
                case 3: alUV = d.uv3; break;
            }
            half4 alMask = SAMPLE_TEXTURE2D(_ALMap, sampler_ALMap, alUV);

            #if defined(AL_MODE_SINGLE_CHANNEL)

            half sampledAL = 0;
            UNITY_BRANCH
            if (_ALSmoothingLevel == 0) {
                sampledAL = AudioLinkData(int2(0, _ALBand)).x;
            } else {
                sampledAL = AudioLinkData(ALPASS_FILTEREDAUDIOLINK + int2(16 - _ALSmoothingLevel, _ALBand)).x;
            }
            half3 em = alMask.rgb * _ALEmissionColor.rgb * sampledAL;

            #elif defined(AL_MODE_PACKED_MAP)

            half audioDataBass = 0;
            half audioDataMids = 0;
            half audioDataHighs = 0;
            UNITY_BRANCH
            if (_ALSmoothingLevel == 0) {
                audioDataBass = AudioLinkData(ALPASS_AUDIOBASS).x;
                audioDataMids = AudioLinkData(ALPASS_AUDIOLOWMIDS).x;
                audioDataHighs = (AudioLinkData(ALPASS_AUDIOHIGHMIDS).x + AudioLinkData(ALPASS_AUDIOTREBLE).x) * 0.5;
            } else {
                audioDataBass = AudioLinkData(ALPASS_FILTEREDAUDIOLINK + int2(16 - _ALSmoothingLevel,0)).x;
                audioDataMids = AudioLinkData(ALPASS_FILTEREDAUDIOLINK + int2(16 - _ALSmoothingLevel,1)).x;
                audioDataHighs = (AudioLinkData(ALPASS_FILTEREDAUDIOLINK + int2(16 - _ALSmoothingLevel,2)).x + AudioLinkData(ALPASS_FILTEREDAUDIOLINK + int2(16 - _ALSmoothingLevel,3)).x) * 0.5;
            }

            audioDataMids = clamp(audioDataMids, 0, 0.98);

            half tLow = smoothstep((1-audioDataBass), (1-audioDataBass) + 0.01, alMask.r) * alMask.a;
            half tMid = smoothstep((1-audioDataMids), (1-audioDataMids) + 0.01, alMask.g) * alMask.a;
            half tHigh = smoothstep((1-audioDataHighs), (1-audioDataHighs) + 0.01, alMask.b) * alMask.a;

            half4 emissionChannelRed = lerp(alMask.r, tLow, _ALGradientOnRed) * _ALPackedRedColor * audioDataBass;
            half4 emissionChannelGreen = lerp(alMask.g, tMid, _ALGradientOnGreen) * _ALPackedGreenColor * audioDataMids;
            half4 emissionChannelBlue = lerp(alMask.b, tHigh, _ALGradientOnBlue) * _ALPackedBlueColor * audioDataHighs;
            half3 em = emissionChannelRed.rgb + emissionChannelGreen.rgb + emissionChannelBlue.rgb;
        
            #elif defined(AL_MODE_UV_BASED)

            half2 aluv;
            aluv = half2(alUV.x * _ALUVWidth, alUV.y);
            half sampledAL = AudioLinkLerp(aluv).x;
            half3 em = alMask.rgb * _ALEmissionColor.rgb * sampledAL;
            
            #else
            half3 em = 0;
            #endif

            half NoV = saturate(dot(d.worldNormal, d.worldSpaceViewDir));
            NoV = lerp(NoV, 1 - NoV, _ALEmissionDotMaskInvert);
            NoV = saturate(pow(NoV, _ALEmissionDotMaskSmoothing));
            o.Emission += lerp(em, em * NoV, _ALEmissionDotMask);
        }

        #endif
    }
}
